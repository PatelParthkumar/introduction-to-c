Grading at Sat Mar  7 18:47:29 UTC 2020
Compiling cards.c -> cards.o
Compiling deck.c -> deck.o
Compiling input.c -> input.o
Compiling future.c -> future.o
Linking input.o, future.o deck.o, cards.o, and our tester
Testing with input file with 
 o 1 hand
 o No unknown/future cards
Valgrind reported errors:
==369== Memcheck, a memory error detector
==369== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==369== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==369== Command: ./tester hands.txt draw.txt
==369== Parent PID: 368
==369== 
==369== Use of uninitialised value of size 8
==369==    at 0x400BCE: read_input (in /graderhome/work/c4prj2_input/tester)
==369==    by 0x4019A5: main (test-input.c:69)
==369== 
==369== Invalid write of size 4
==369==    at 0x400BCE: read_input (in /graderhome/work/c4prj2_input/tester)
==369==    by 0x4019A5: main (test-input.c:69)
==369==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==369== 
==369== 
==369== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==369==  Access not within mapped region at address 0x0
==369==    at 0x400BCE: read_input (in /graderhome/work/c4prj2_input/tester)
==369==    by 0x4019A5: main (test-input.c:69)
==369==  If you believe this happened as a result of a stack
==369==  overflow in your program's main thread (unlikely but
==369==  possible), you can try to increase the size of the
==369==  main thread stack using the --main-stacksize= flag.
==369==  The main thread stack size used in this run was 8388608.
==369== 
==369== HEAP SUMMARY:
==369==     in use at exit: 704 bytes in 5 blocks
==369==   total heap usage: 6 allocs, 1 frees, 4,800 bytes allocated
==369== 
==369== LEAK SUMMARY:
==369==    definitely lost: 0 bytes in 0 blocks
==369==    indirectly lost: 0 bytes in 0 blocks
==369==      possibly lost: 0 bytes in 0 blocks
==369==    still reachable: 704 bytes in 5 blocks
==369==         suppressed: 0 bytes in 0 blocks
==369== Rerun with --leak-check=full to see details of leaked memory
==369== 
==369== For counts of detected and suppressed errors, rerun with: -v
==369== Use --track-origins=yes to see where uninitialised values come from
==369== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o No unknown/future cards
Valgrind reported errors:
==374== Memcheck, a memory error detector
==374== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==374== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==374== Command: ./tester hands.txt draw.txt
==374== Parent PID: 373
==374== 
==374== Use of uninitialised value of size 8
==374==    at 0x400BCE: read_input (in /graderhome/work/c4prj2_input/tester)
==374==    by 0x4019A5: main (test-input.c:69)
==374== 
==374== Invalid write of size 4
==374==    at 0x400BCE: read_input (in /graderhome/work/c4prj2_input/tester)
==374==    by 0x4019A5: main (test-input.c:69)
==374==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==374== 
==374== 
==374== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==374==  Access not within mapped region at address 0x0
==374==    at 0x400BCE: read_input (in /graderhome/work/c4prj2_input/tester)
==374==    by 0x4019A5: main (test-input.c:69)
==374==  If you believe this happened as a result of a stack
==374==  overflow in your program's main thread (unlikely but
==374==  possible), you can try to increase the size of the
==374==  main thread stack using the --main-stacksize= flag.
==374==  The main thread stack size used in this run was 8388608.
==374== 
==374== HEAP SUMMARY:
==374==     in use at exit: 704 bytes in 5 blocks
==374==   total heap usage: 6 allocs, 1 frees, 4,800 bytes allocated
==374== 
==374== LEAK SUMMARY:
==374==    definitely lost: 0 bytes in 0 blocks
==374==    indirectly lost: 0 bytes in 0 blocks
==374==      possibly lost: 0 bytes in 0 blocks
==374==    still reachable: 704 bytes in 5 blocks
==374==         suppressed: 0 bytes in 0 blocks
==374== Rerun with --leak-check=full to see details of leaked memory
==374== 
==374== For counts of detected and suppressed errors, rerun with: -v
==374== Use --track-origins=yes to see where uninitialised values come from
==374== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o 1 unknown/future cards per hand
Valgrind reported errors:
==380== Memcheck, a memory error detector
==380== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==380== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==380== Command: ./tester h.txt d.txt
==380== Parent PID: 379
==380== 
==380== Use of uninitialised value of size 8
==380==    at 0x400BCE: read_input (in /graderhome/work/c4prj2_input/tester)
==380==    by 0x4019A5: main (test-input.c:69)
==380== 
==380== Invalid write of size 4
==380==    at 0x400BCE: read_input (in /graderhome/work/c4prj2_input/tester)
==380==    by 0x4019A5: main (test-input.c:69)
==380==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==380== 
==380== 
==380== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==380==  Access not within mapped region at address 0x0
==380==    at 0x400BCE: read_input (in /graderhome/work/c4prj2_input/tester)
==380==    by 0x4019A5: main (test-input.c:69)
==380==  If you believe this happened as a result of a stack
==380==  overflow in your program's main thread (unlikely but
==380==  possible), you can try to increase the size of the
==380==  main thread stack using the --main-stacksize= flag.
==380==  The main thread stack size used in this run was 8388608.
==380== 
==380== HEAP SUMMARY:
==380==     in use at exit: 704 bytes in 5 blocks
==380==   total heap usage: 6 allocs, 1 frees, 4,800 bytes allocated
==380== 
==380== LEAK SUMMARY:
==380==    definitely lost: 0 bytes in 0 blocks
==380==    indirectly lost: 0 bytes in 0 blocks
==380==      possibly lost: 0 bytes in 0 blocks
==380==    still reachable: 704 bytes in 5 blocks
==380==         suppressed: 0 bytes in 0 blocks
==380== Rerun with --leak-check=full to see details of leaked memory
==380== 
==380== For counts of detected and suppressed errors, rerun with: -v
==380== Use --track-origins=yes to see where uninitialised values come from
==380== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o Many unknown/future cards per hand
Valgrind reported errors:
==386== Memcheck, a memory error detector
==386== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==386== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==386== Command: ./tester i1 i2
==386== Parent PID: 385
==386== 
==386== Use of uninitialised value of size 8
==386==    at 0x400BCE: read_input (in /graderhome/work/c4prj2_input/tester)
==386==    by 0x4019A5: main (test-input.c:69)
==386== 
==386== Invalid write of size 4
==386==    at 0x400BCE: read_input (in /graderhome/work/c4prj2_input/tester)
==386==    by 0x4019A5: main (test-input.c:69)
==386==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==386== 
==386== 
==386== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==386==  Access not within mapped region at address 0x0
==386==    at 0x400BCE: read_input (in /graderhome/work/c4prj2_input/tester)
==386==    by 0x4019A5: main (test-input.c:69)
==386==  If you believe this happened as a result of a stack
==386==  overflow in your program's main thread (unlikely but
==386==  possible), you can try to increase the size of the
==386==  main thread stack using the --main-stacksize= flag.
==386==  The main thread stack size used in this run was 8388608.
==386== 
==386== HEAP SUMMARY:
==386==     in use at exit: 704 bytes in 5 blocks
==386==   total heap usage: 6 allocs, 1 frees, 4,800 bytes allocated
==386== 
==386== LEAK SUMMARY:
==386==    definitely lost: 0 bytes in 0 blocks
==386==    indirectly lost: 0 bytes in 0 blocks
==386==      possibly lost: 0 bytes in 0 blocks
==386==    still reachable: 704 bytes in 5 blocks
==386==         suppressed: 0 bytes in 0 blocks
==386== Rerun with --leak-check=full to see details of leaked memory
==386== 
==386== For counts of detected and suppressed errors, rerun with: -v
==386== Use --track-origins=yes to see where uninitialised values come from
==386== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)

Overall Grade: F
