Grading at Sat Mar  7 19:36:43 UTC 2020
Compiling cards.c -> cards.o
Compiling deck.c -> deck.o
Compiling input.c -> input.o
Compiling future.c -> future.o
Linking input.o, future.o deck.o, cards.o, and our tester
Testing with input file with 
 o 1 hand
 o No unknown/future cards
Your file matched the expected output
Test case passed
Testing with input file with 
 o Many hands
 o No unknown/future cards
Your file matched the expected output
Test case passed
Testing with input file with 
 o Many hands
 o 1 unknown/future cards per hand
Valgrind reported errors:
==1284== Memcheck, a memory error detector
==1284== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1284== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1284== Command: ./tester h.txt d.txt
==1284== Parent PID: 1283
==1284== 
==1284== Invalid read of size 8
==1284==    at 0x400D09: add_future_card (in /graderhome/work/c4prj2_input/tester)
==1284==    by 0x400B9A: read_input (in /graderhome/work/c4prj2_input/tester)
==1284==    by 0x401A1A: main (test-input.c:69)
==1284==  Address 0x308 is not stack'd, malloc'd or (recently) free'd
==1284== 
==1284== 
==1284== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1284==  Access not within mapped region at address 0x308
==1284==    at 0x400D09: add_future_card (in /graderhome/work/c4prj2_input/tester)
==1284==    by 0x400B9A: read_input (in /graderhome/work/c4prj2_input/tester)
==1284==    by 0x401A1A: main (test-input.c:69)
==1284==  If you believe this happened as a result of a stack
==1284==  overflow in your program's main thread (unlikely but
==1284==  possible), you can try to increase the size of the
==1284==  main thread stack using the --main-stacksize= flag.
==1284==  The main thread stack size used in this run was 8388608.
==1284== 
==1284== HEAP SUMMARY:
==1284==     in use at exit: 816 bytes in 12 blocks
==1284==   total heap usage: 19 allocs, 7 frees, 5,080 bytes allocated
==1284== 
==1284== LEAK SUMMARY:
==1284==    definitely lost: 0 bytes in 0 blocks
==1284==    indirectly lost: 0 bytes in 0 blocks
==1284==      possibly lost: 0 bytes in 0 blocks
==1284==    still reachable: 816 bytes in 12 blocks
==1284==         suppressed: 0 bytes in 0 blocks
==1284== Rerun with --leak-check=full to see details of leaked memory
==1284== 
==1284== For counts of detected and suppressed errors, rerun with: -v
==1284== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o Many unknown/future cards per hand
Valgrind reported errors:
==1290== Memcheck, a memory error detector
==1290== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1290== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1290== Command: ./tester i1 i2
==1290== Parent PID: 1289
==1290== 
==1290== Invalid read of size 8
==1290==    at 0x400D09: add_future_card (in /graderhome/work/c4prj2_input/tester)
==1290==    by 0x400B9A: read_input (in /graderhome/work/c4prj2_input/tester)
==1290==    by 0x401A1A: main (test-input.c:69)
==1290==  Address 0x308 is not stack'd, malloc'd or (recently) free'd
==1290== 
==1290== 
==1290== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1290==  Access not within mapped region at address 0x308
==1290==    at 0x400D09: add_future_card (in /graderhome/work/c4prj2_input/tester)
==1290==    by 0x400B9A: read_input (in /graderhome/work/c4prj2_input/tester)
==1290==    by 0x401A1A: main (test-input.c:69)
==1290==  If you believe this happened as a result of a stack
==1290==  overflow in your program's main thread (unlikely but
==1290==  possible), you can try to increase the size of the
==1290==  main thread stack using the --main-stacksize= flag.
==1290==  The main thread stack size used in this run was 8388608.
==1290== 
==1290== HEAP SUMMARY:
==1290==     in use at exit: 768 bytes in 9 blocks
==1290==   total heap usage: 13 allocs, 4 frees, 4,912 bytes allocated
==1290== 
==1290== LEAK SUMMARY:
==1290==    definitely lost: 0 bytes in 0 blocks
==1290==    indirectly lost: 0 bytes in 0 blocks
==1290==      possibly lost: 0 bytes in 0 blocks
==1290==    still reachable: 768 bytes in 9 blocks
==1290==         suppressed: 0 bytes in 0 blocks
==1290== Rerun with --leak-check=full to see details of leaked memory
==1290== 
==1290== For counts of detected and suppressed errors, rerun with: -v
==1290== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

Overall Grade: C
