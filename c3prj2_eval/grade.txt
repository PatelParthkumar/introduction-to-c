Grading at Mon Dec 30 22:16:14 UTC 2019
Compiling your code
rm -f test poker cards.o my-test-main.o *~
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o deck.o deck.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o eval.o eval.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o cards.o cards.c
gcc -o test-eval -ggdb3 deck.o deck-c4.o eval-c4.o eval.o test-eval.o cards.o input.o future.o
Testcase 1: Trying hands with nothing
Valgrind returned an error status
==643== Memcheck, a memory error detector
==643== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==643== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==643== Command: ./test-eval inp.1.txt
==643== Parent PID: 642
==643== 
==643== Use of uninitialised value of size 8
==643==    at 0x400C02: print_hand (deck.c:19)
==643==    by 0x4028B7: describe_hand (test-eval.c:74)
==643==    by 0x402A97: main (test-eval.c:116)
==643== 
==643== Invalid read of size 8
==643==    at 0x400C02: print_hand (deck.c:19)
==643==    by 0x4028B7: describe_hand (test-eval.c:74)
==643==    by 0x402A97: main (test-eval.c:116)
==643==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==643== 
==643== 
==643== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==643==  Access not within mapped region at address 0x0
==643==    at 0x400C02: print_hand (deck.c:19)
==643==    by 0x4028B7: describe_hand (test-eval.c:74)
==643==    by 0x402A97: main (test-eval.c:116)
==643==  If you believe this happened as a result of a stack
==643==  overflow in your program's main thread (unlikely but
==643==  possible), you can try to increase the size of the
==643==  main thread stack using the --main-stacksize= flag.
==643==  The main thread stack size used in this run was 8388608.
==643== 
==643== HEAP SUMMARY:
==643==     in use at exit: 864 bytes in 16 blocks
==643==   total heap usage: 202 allocs, 186 frees, 12,472 bytes allocated
==643== 
==643== LEAK SUMMARY:
==643==    definitely lost: 0 bytes in 0 blocks
==643==    indirectly lost: 0 bytes in 0 blocks
==643==      possibly lost: 0 bytes in 0 blocks
==643==    still reachable: 864 bytes in 16 blocks
==643==         suppressed: 0 bytes in 0 blocks
==643== Rerun with --leak-check=full to see details of leaked memory
==643== 
==643== For counts of detected and suppressed errors, rerun with: -v
==643== Use --track-origins=yes to see where uninitialised values come from
==643== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 2: Trying hands with pairs
Valgrind returned an error status
==648== Memcheck, a memory error detector
==648== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==648== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==648== Command: ./test-eval inp.2.txt
==648== Parent PID: 647
==648== 
==648== Use of uninitialised value of size 8
==648==    at 0x400C02: print_hand (deck.c:19)
==648==    by 0x4028B7: describe_hand (test-eval.c:74)
==648==    by 0x402AB7: main (test-eval.c:119)
==648== 
==648== Invalid read of size 8
==648==    at 0x400C02: print_hand (deck.c:19)
==648==    by 0x4028B7: describe_hand (test-eval.c:74)
==648==    by 0x402AB7: main (test-eval.c:119)
==648==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==648== 
==648== 
==648== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==648==  Access not within mapped region at address 0x0
==648==    at 0x400C02: print_hand (deck.c:19)
==648==    by 0x4028B7: describe_hand (test-eval.c:74)
==648==    by 0x402AB7: main (test-eval.c:119)
==648==  If you believe this happened as a result of a stack
==648==  overflow in your program's main thread (unlikely but
==648==  possible), you can try to increase the size of the
==648==  main thread stack using the --main-stacksize= flag.
==648==  The main thread stack size used in this run was 8388608.
==648== 
==648== HEAP SUMMARY:
==648==     in use at exit: 880 bytes in 17 blocks
==648==   total heap usage: 32 allocs, 15 frees, 9,360 bytes allocated
==648== 
==648== LEAK SUMMARY:
==648==    definitely lost: 0 bytes in 0 blocks
==648==    indirectly lost: 0 bytes in 0 blocks
==648==      possibly lost: 0 bytes in 0 blocks
==648==    still reachable: 880 bytes in 17 blocks
==648==         suppressed: 0 bytes in 0 blocks
==648== Rerun with --leak-check=full to see details of leaked memory
==648== 
==648== For counts of detected and suppressed errors, rerun with: -v
==648== Use --track-origins=yes to see where uninitialised values come from
==648== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 3: Trying hands with 2 pairs
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 4: Trying hands with 3 of a kind
Valgrind returned an error status
==665== Memcheck, a memory error detector
==665== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==665== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==665== Command: ./test-eval inp.4.txt
==665== Parent PID: 664
==665== 
==665== Use of uninitialised value of size 8
==665==    at 0x400C02: print_hand (deck.c:19)
==665==    by 0x4028B7: describe_hand (test-eval.c:74)
==665==    by 0x402A97: main (test-eval.c:116)
==665== 
==665== Invalid read of size 8
==665==    at 0x400C02: print_hand (deck.c:19)
==665==    by 0x4028B7: describe_hand (test-eval.c:74)
==665==    by 0x402A97: main (test-eval.c:116)
==665==  Address 0x520bd30 is 0 bytes inside a block of size 24 free'd
==665==    at 0x4C2EDEB: free (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==665==    by 0x4020B1: evaluate_hand (eval.c:515)
==665==    by 0x40286C: describe_hand (test-eval.c:68)
==665==    by 0x402A97: main (test-eval.c:116)
==665==  Block was alloc'd at
==665==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==665==    by 0x4013DE: get_match_counts (eval-c4.c:70)
==665==    by 0x40202F: evaluate_hand (eval.c:510)
==665==    by 0x40286C: describe_hand (test-eval.c:68)
==665==    by 0x402A97: main (test-eval.c:116)
==665== 
==665== 
==665== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==665==  Access not within mapped region at address 0x0
==665==    at 0x400C02: print_hand (deck.c:19)
==665==    by 0x4028B7: describe_hand (test-eval.c:74)
==665==    by 0x402A97: main (test-eval.c:116)
==665==  If you believe this happened as a result of a stack
==665==  overflow in your program's main thread (unlikely but
==665==  possible), you can try to increase the size of the
==665==  main thread stack using the --main-stacksize= flag.
==665==  The main thread stack size used in this run was 8388608.
==665== 
==665== HEAP SUMMARY:
==665==     in use at exit: 896 bytes in 18 blocks
==665==   total heap usage: 264 allocs, 246 frees, 13,664 bytes allocated
==665== 
==665== LEAK SUMMARY:
==665==    definitely lost: 0 bytes in 0 blocks
==665==    indirectly lost: 0 bytes in 0 blocks
==665==      possibly lost: 0 bytes in 0 blocks
==665==    still reachable: 896 bytes in 18 blocks
==665==         suppressed: 0 bytes in 0 blocks
==665== Rerun with --leak-check=full to see details of leaked memory
==665== 
==665== For counts of detected and suppressed errors, rerun with: -v
==665== Use --track-origins=yes to see where uninitialised values come from
==665== ERROR SUMMARY: 4 errors from 2 contexts (suppressed: 0 from 0)
Testcase 5: Trying hands with straights
 Checking the output 
Line_51_did_not_match
Line_52_did_not_match
Line_59_did_not_match
Line_60_did_not_match
Your file did not match the expected ouput
 - Output did not match, testcase failed
Hand 1:								Hand 1:
--------							--------
0s 9s 8c 7h 6d 							0s 9s 8c 7h 6d 
 - No flush							 - No flush
 - Straight at index 0						 - Straight at index 0
 - The most of a kind is 1 of a kind (at index 0 / value 0)	 - The most of a kind is 1 of a kind (at index 0 / value 0)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: STRAIGHT				 - evaluate_hand's ranking: STRAIGHT
 - 5 cards used for hand: 0s 9s 8c 7h 6d 			 - 5 cards used for hand: 0s 9s 8c 7h 6d 
Hand 2:								Hand 2:
--------							--------
Js 0c 9s 8d 7c 							Js 0c 9s 8d 7c 
 - No flush							 - No flush
 - Straight at index 0						 - Straight at index 0
 - The most of a kind is 1 of a kind (at index 0 / value J)	 - The most of a kind is 1 of a kind (at index 0 / value J)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: STRAIGHT				 - evaluate_hand's ranking: STRAIGHT
 - 5 cards used for hand: Js 0c 9s 8d 7c 			 - 5 cards used for hand: Js 0c 9s 8d 7c 
Comparison : 							Comparison : 
--------------							--------------
Hand 2 wins!							Hand 2 wins!
============================					============================
Hand 1:								Hand 1:
--------							--------
As 5c 4h 3s 2c 							As 5c 4h 3s 2c 
 - No flush							 - No flush
 - Straight at index 0						 - Straight at index 0
 - The most of a kind is 1 of a kind (at index 0 / value A)	 - The most of a kind is 1 of a kind (at index 0 / value A)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: STRAIGHT				 - evaluate_hand's ranking: STRAIGHT
 - 5 cards used for hand: 5c 4h 3s 2c As 			 - 5 cards used for hand: 5c 4h 3s 2c As 
Hand 2:								Hand 2:
--------							--------
6c 5h 4s 3s 2d 							6c 5h 4s 3s 2d 
 - No flush							 - No flush
 - Straight at index 0						 - Straight at index 0
 - The most of a kind is 1 of a kind (at index 0 / value 6)	 - The most of a kind is 1 of a kind (at index 0 / value 6)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: STRAIGHT				 - evaluate_hand's ranking: STRAIGHT
 - 5 cards used for hand: 6c 5h 4s 3s 2d 			 - 5 cards used for hand: 6c 5h 4s 3s 2d 
Comparison : 							Comparison : 
--------------							--------------
Hand 2 wins!							Hand 2 wins!
============================					============================
Hand 1:								Hand 1:
--------							--------
Qh Qs Jd Js 0c 0s 9d 8c 					Qh Qs Jd Js 0c 0s 9d 8c 
 - No flush							 - No flush
 - Straight at index 0					      <
 - Straight at index 1					      <
 - The most of a kind is 2 of a kind (at index 0 / value Q)	 - The most of a kind is 2 of a kind (at index 0 / value Q)
 - Secondary pair at index 2 (value J)				 - Secondary pair at index 2 (value J)
 - evaluate_hand's ranking: STRAIGHT			      |	 - evaluate_hand's ranking: TWO_PAIR
 - 5 cards used for hand: Qh Jd 0c 9d 8c 		      |	 - 5 cards used for hand: Qh Qs Jd Js 0c 
Hand 2:								Hand 2:
--------							--------
Kc Qh Qs Jd Js 0c 0s 9d 					Kc Qh Qs Jd Js 0c 0s 9d 
 - No flush							 - No flush
 - Straight at index 0					      <
 - The most of a kind is 2 of a kind (at index 1 / value Q)	 - The most of a kind is 2 of a kind (at index 1 / value Q)
 - Secondary pair at index 3 (value J)				 - Secondary pair at index 3 (value J)
 - evaluate_hand's ranking: STRAIGHT			      |	 - evaluate_hand's ranking: TWO_PAIR
 - 5 cards used for hand: Kc Qh Jd 0c 9d 		      |	 - 5 cards used for hand: Qh Qs Jd Js Kc 
Comparison : 							Comparison : 
--------------							--------------
Hand 2 wins!							Hand 2 wins!
============================					============================
Hand 1:								Hand 1:
--------							--------
As Jd 9h 8c 7d 6c 5d 						As Jd 9h 8c 7d 6c 5d 
 - No flush							 - No flush
 - Straight at index 2						 - Straight at index 2
 - The most of a kind is 1 of a kind (at index 0 / value A)	 - The most of a kind is 1 of a kind (at index 0 / value A)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: STRAIGHT				 - evaluate_hand's ranking: STRAIGHT
 - 5 cards used for hand: 9h 8c 7d 6c 5d 			 - 5 cards used for hand: 9h 8c 7d 6c 5d 
Hand 2:								Hand 2:
--------							--------
Kc Qh 8c 7h 6c 5d 4s 						Kc Qh 8c 7h 6c 5d 4s 
 - No flush							 - No flush
 - Straight at index 2						 - Straight at index 2
 - The most of a kind is 1 of a kind (at index 0 / value K)	 - The most of a kind is 1 of a kind (at index 0 / value K)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: STRAIGHT				 - evaluate_hand's ranking: STRAIGHT
 - 5 cards used for hand: 8c 7h 6c 5d 4s 			 - 5 cards used for hand: 8c 7h 6c 5d 4s 
Comparison : 							Comparison : 
--------------							--------------
Hand 1 wins!							Hand 1 wins!
============================					============================
Hand 1:								Hand 1:
--------							--------
As Kd Qs Jd 0s 							As Kd Qs Jd 0s 
 - No flush							 - No flush
 - Straight at index 0						 - Straight at index 0
 - The most of a kind is 1 of a kind (at index 0 / value A)	 - The most of a kind is 1 of a kind (at index 0 / value A)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: STRAIGHT				 - evaluate_hand's ranking: STRAIGHT
 - 5 cards used for hand: As Kd Qs Jd 0s 			 - 5 cards used for hand: As Kd Qs Jd 0s 
Hand 2:								Hand 2:
--------							--------
Ac 5s 4c 3s 2s 							Ac 5s 4c 3s 2s 
 - No flush							 - No flush
 - Straight at index 0						 - Straight at index 0
 - The most of a kind is 1 of a kind (at index 0 / value A)	 - The most of a kind is 1 of a kind (at index 0 / value A)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: STRAIGHT				 - evaluate_hand's ranking: STRAIGHT
 - 5 cards used for hand: 5s 4c 3s 2s Ac 			 - 5 cards used for hand: 5s 4c 3s 2s Ac 
Comparison : 							Comparison : 
--------------							--------------
Hand 1 wins!							Hand 1 wins!
============================					============================
Hand 1:								Hand 1:
--------							--------
Jh 0s 9c 8s 7c 4c 3d 						Jh 0s 9c 8s 7c 4c 3d 
 - No flush							 - No flush
 - Straight at index 0						 - Straight at index 0
 - The most of a kind is 1 of a kind (at index 0 / value J)	 - The most of a kind is 1 of a kind (at index 0 / value J)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: STRAIGHT				 - evaluate_hand's ranking: STRAIGHT
 - 5 cards used for hand: Jh 0s 9c 8s 7c 			 - 5 cards used for hand: Jh 0s 9c 8s 7c 
Hand 2:								Hand 2:
--------							--------
Jh 0s 9c 8s 7c 6c 5d 						Jh 0s 9c 8s 7c 6c 5d 
 - No flush							 - No flush
 - Straight at index 0						 - Straight at index 0
 - Straight at index 1						 - Straight at index 1
 - Straight at index 2						 - Straight at index 2
 - The most of a kind is 1 of a kind (at index 0 / value J)	 - The most of a kind is 1 of a kind (at index 0 / value J)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: STRAIGHT				 - evaluate_hand's ranking: STRAIGHT
 - 5 cards used for hand: Jh 0s 9c 8s 7c 			 - 5 cards used for hand: Jh 0s 9c 8s 7c 
Comparison : 							Comparison : 
--------------							--------------
Tie								Tie
============================					============================
Testcase 6: Trying hands with flushes
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 7: Trying hands with full houses
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 8: Trying hands with 4 of a kind
Valgrind returned an error status
==707== Memcheck, a memory error detector
==707== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==707== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==707== Command: ./test-eval inp.8.txt
==707== Parent PID: 706
==707== 
==707== Use of uninitialised value of size 8
==707==    at 0x400C02: print_hand (deck.c:19)
==707==    by 0x4028B7: describe_hand (test-eval.c:74)
==707==    by 0x402AB7: main (test-eval.c:119)
==707== 
==707== Invalid read of size 8
==707==    at 0x400C02: print_hand (deck.c:19)
==707==    by 0x4028B7: describe_hand (test-eval.c:74)
==707==    by 0x402AB7: main (test-eval.c:119)
==707==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==707== 
==707== 
==707== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==707==  Access not within mapped region at address 0x0
==707==    at 0x400C02: print_hand (deck.c:19)
==707==    by 0x4028B7: describe_hand (test-eval.c:74)
==707==    by 0x402AB7: main (test-eval.c:119)
==707==  If you believe this happened as a result of a stack
==707==  overflow in your program's main thread (unlikely but
==707==  possible), you can try to increase the size of the
==707==  main thread stack using the --main-stacksize= flag.
==707==  The main thread stack size used in this run was 8388608.
==707== 
==707== HEAP SUMMARY:
==707==     in use at exit: 896 bytes in 18 blocks
==707==   total heap usage: 150 allocs, 132 frees, 11,568 bytes allocated
==707== 
==707== LEAK SUMMARY:
==707==    definitely lost: 0 bytes in 0 blocks
==707==    indirectly lost: 0 bytes in 0 blocks
==707==      possibly lost: 0 bytes in 0 blocks
==707==    still reachable: 896 bytes in 18 blocks
==707==         suppressed: 0 bytes in 0 blocks
==707== Rerun with --leak-check=full to see details of leaked memory
==707== 
==707== For counts of detected and suppressed errors, rerun with: -v
==707== Use --track-origins=yes to see where uninitialised values come from
==707== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 9: Trying hands with straight flushes
 Checking the output 
Line_62_did_not_match
Your file did not match the expected ouput
 - Output did not match, testcase failed
Hand 1:								Hand 1:
--------							--------
As Ks Qs Js 0s 							As Ks Qs Js 0s 
 - Flush in suit s						 - Flush in suit s
 - Straight flush at index 0					 - Straight flush at index 0
 - The most of a kind is 1 of a kind (at index 0 / value A)	 - The most of a kind is 1 of a kind (at index 0 / value A)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: STRAIGHT_FLUSH			 - evaluate_hand's ranking: STRAIGHT_FLUSH
 - 5 cards used for hand: As Ks Qs Js 0s 			 - 5 cards used for hand: As Ks Qs Js 0s 
Hand 2:								Hand 2:
--------							--------
Kh Qh Jh 0h 9h 							Kh Qh Jh 0h 9h 
 - Flush in suit h						 - Flush in suit h
 - Straight flush at index 0					 - Straight flush at index 0
 - The most of a kind is 1 of a kind (at index 0 / value K)	 - The most of a kind is 1 of a kind (at index 0 / value K)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: STRAIGHT_FLUSH			 - evaluate_hand's ranking: STRAIGHT_FLUSH
 - 5 cards used for hand: Kh Qh Jh 0h 9h 			 - 5 cards used for hand: Kh Qh Jh 0h 9h 
Comparison : 							Comparison : 
--------------							--------------
Hand 1 wins!							Hand 1 wins!
============================					============================
Hand 1:								Hand 1:
--------							--------
As Ks Qs Js 0s 9s 8s 						As Ks Qs Js 0s 9s 8s 
 - Flush in suit s						 - Flush in suit s
 - Straight flush at index 0					 - Straight flush at index 0
 - Straight flush at index 1					 - Straight flush at index 1
 - Straight flush at index 2					 - Straight flush at index 2
 - The most of a kind is 1 of a kind (at index 0 / value A)	 - The most of a kind is 1 of a kind (at index 0 / value A)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: STRAIGHT_FLUSH			 - evaluate_hand's ranking: STRAIGHT_FLUSH
 - 5 cards used for hand: As Ks Qs Js 0s 			 - 5 cards used for hand: As Ks Qs Js 0s 
Hand 2:								Hand 2:
--------							--------
Kh Qh Jh 0h 9h 8h 7h 						Kh Qh Jh 0h 9h 8h 7h 
 - Flush in suit h						 - Flush in suit h
 - Straight flush at index 0					 - Straight flush at index 0
 - Straight flush at index 1					 - Straight flush at index 1
 - Straight flush at index 2					 - Straight flush at index 2
 - The most of a kind is 1 of a kind (at index 0 / value K)	 - The most of a kind is 1 of a kind (at index 0 / value K)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: STRAIGHT_FLUSH			 - evaluate_hand's ranking: STRAIGHT_FLUSH
 - 5 cards used for hand: Kh Qh Jh 0h 9h 			 - 5 cards used for hand: Kh Qh Jh 0h 9h 
Comparison : 							Comparison : 
--------------							--------------
Hand 1 wins!							Hand 1 wins!
============================					============================
Hand 1:								Hand 1:
--------							--------
Ac As Kc Ks Qs Js 0s 						Ac As Kc Ks Qs Js 0s 
 - Flush in suit s						 - Flush in suit s
 - Straight at index 0					      <
 - Straight flush at index 1					 - Straight flush at index 1
 - The most of a kind is 2 of a kind (at index 0 / value A)	 - The most of a kind is 2 of a kind (at index 0 / value A)
 - Secondary pair at index 2 (value K)				 - Secondary pair at index 2 (value K)
 - evaluate_hand's ranking: STRAIGHT_FLUSH			 - evaluate_hand's ranking: STRAIGHT_FLUSH
 - 5 cards used for hand: As Ks Qs Js 0s 			 - 5 cards used for hand: As Ks Qs Js 0s 
Hand 2:								Hand 2:
--------							--------
Ad Kh Qh Jh Js 0h 9h 						Ad Kh Qh Jh Js 0h 9h 
 - Flush in suit h						 - Flush in suit h
 - Straight at index 0					      <
 - Straight flush at index 1				      <
 - The most of a kind is 2 of a kind (at index 3 / value J)   <
 - No secondary pair					      <
 - evaluate_hand's ranking: STRAIGHT_FLUSH		      <
 - 5 cards used for hand: Kh Qh Jh 0h 9h 		      <
Comparison : 						      <
--------------						      <
Hand 1 wins!						      <
============================				      <
Hand 1:							      <
--------						      <
Ah Kc 5h 4h 3h 2h 					      <
 - Flush in suit h					      <
 - Straight flush at index 0				      <
 - The most of a kind is 1 of a kind (at index 0 / value A)   <
 - No secondary pair					      <
 - evaluate_hand's ranking: STRAIGHT_FLUSH		      <
 - 5 cards used for hand: 5h 4h 3h 2h Ah 		      <
Hand 2:							      <
--------						      <
Ac 6c 5c 4c 3c 2c 					      <
 - Flush in suit c					      <
 - Straight flush at index 0					 - Straight flush at index 0
 - Straight flush at index 1					 - Straight flush at index 1
 - The most of a kind is 1 of a kind (at index 0 / value A)   |	 - The most of a kind is 2 of a kind (at index 3 / value J)
 - No secondary pair					      <
 - evaluate_hand's ranking: STRAIGHT_FLUSH		      <
 - 5 cards used for hand: 5c 4c 3c 2c Ac 		      <
Comparison : 						      <
--------------						      <
Tie							      <
============================				      <
Hand 1:							      <
--------						      <
As Ks Qs Js 0s 						      <
 - Flush in suit s					      <
 - Straight flush at index 0				      <
 - The most of a kind is 1 of a kind (at index 0 / value A)   <
 - No secondary pair					      <
 - evaluate_hand's ranking: STRAIGHT_FLUSH		      <
 - 5 cards used for hand: As Ks Qs Js 0s 		      <
Hand 2:							      <
--------						      <
As 5s 4s 3s 2s 						      <
 - Flush in suit s					      <
 - Straight flush at index 0				      <
 - The most of a kind is 1 of a kind (at index 0 / value A)   <
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: STRAIGHT_FLUSH		      <
 - 5 cards used for hand: 5s 4s 3s 2s As 		      <
Comparison : 						      <
--------------						      <
Hand 1 wins!						      <
============================				      <
Testcase 10: Trying each type of hand ranking
Valgrind returned an error status
==725== Memcheck, a memory error detector
==725== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==725== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==725== Command: ./test-eval inp.10.txt
==725== Parent PID: 724
==725== 
==725== Use of uninitialised value of size 8
==725==    at 0x400C02: print_hand (deck.c:19)
==725==    by 0x4028B7: describe_hand (test-eval.c:74)
==725==    by 0x402AB7: main (test-eval.c:119)
==725== 
==725== Invalid read of size 8
==725==    at 0x400C02: print_hand (deck.c:19)
==725==    by 0x4028B7: describe_hand (test-eval.c:74)
==725==    by 0x402AB7: main (test-eval.c:119)
==725==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==725== 
==725== 
==725== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==725==  Access not within mapped region at address 0x0
==725==    at 0x400C02: print_hand (deck.c:19)
==725==    by 0x4028B7: describe_hand (test-eval.c:74)
==725==    by 0x402AB7: main (test-eval.c:119)
==725==  If you believe this happened as a result of a stack
==725==  overflow in your program's main thread (unlikely but
==725==  possible), you can try to increase the size of the
==725==  main thread stack using the --main-stacksize= flag.
==725==  The main thread stack size used in this run was 8388608.
==725== 
==725== HEAP SUMMARY:
==725==     in use at exit: 880 bytes in 17 blocks
==725==   total heap usage: 210 allocs, 193 frees, 12,716 bytes allocated
==725== 
==725== LEAK SUMMARY:
==725==    definitely lost: 0 bytes in 0 blocks
==725==    indirectly lost: 0 bytes in 0 blocks
==725==      possibly lost: 0 bytes in 0 blocks
==725==    still reachable: 880 bytes in 17 blocks
==725==         suppressed: 0 bytes in 0 blocks
==725== Rerun with --leak-check=full to see details of leaked memory
==725== 
==725== For counts of detected and suppressed errors, rerun with: -v
==725== Use --track-origins=yes to see where uninitialised values come from
==725== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)

Overall Grade: F
