Grading at Fri Dec 27 03:52:34 UTC 2019
Compiling your code
rm -f test poker cards.o my-test-main.o *~
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o deck.o deck.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o eval.o eval.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o cards.o cards.c
gcc -o test-eval -ggdb3 deck.o deck-c4.o eval-c4.o eval.o test-eval.o cards.o input.o future.o
Testcase 1: Trying hands with nothing
Valgrind returned an error status
==334== Memcheck, a memory error detector
==334== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==334== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==334== Command: ./test-eval inp.1.txt
==334== Parent PID: 333
==334== 
==334== Invalid read of size 8
==334==    at 0x401752: find_secondary_pair (eval.c:175)
==334==    by 0x402846: describe_hand (test-eval.c:57)
==334==    by 0x402B21: main (test-eval.c:116)
==334==  Address 0x5205758 is 8 bytes before a block of size 48 alloc'd
==334==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==334==    by 0x401054: add_card_to (deck-c4.c:29)
==334==    by 0x4032BF: hand_from_string (input.c:49)
==334==    by 0x402AA6: main (test-eval.c:110)
==334== 
==334== Invalid read of size 4
==334==    at 0x401755: find_secondary_pair (eval.c:175)
==334==    by 0x402846: describe_hand (test-eval.c:57)
==334==    by 0x402B21: main (test-eval.c:116)
==334==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==334== 
==334== 
==334== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==334==  Access not within mapped region at address 0x0
==334==    at 0x401755: find_secondary_pair (eval.c:175)
==334==    by 0x402846: describe_hand (test-eval.c:57)
==334==    by 0x402B21: main (test-eval.c:116)
==334==  If you believe this happened as a result of a stack
==334==  overflow in your program's main thread (unlikely but
==334==  possible), you can try to increase the size of the
==334==  main thread stack using the --main-stacksize= flag.
==334==  The main thread stack size used in this run was 8388608.
==334== 
==334== HEAP SUMMARY:
==334==     in use at exit: 920 bytes in 19 blocks
==334==   total heap usage: 31 allocs, 12 frees, 9,352 bytes allocated
==334== 
==334== LEAK SUMMARY:
==334==    definitely lost: 0 bytes in 0 blocks
==334==    indirectly lost: 0 bytes in 0 blocks
==334==      possibly lost: 0 bytes in 0 blocks
==334==    still reachable: 920 bytes in 19 blocks
==334==         suppressed: 0 bytes in 0 blocks
==334== Rerun with --leak-check=full to see details of leaked memory
==334== 
==334== For counts of detected and suppressed errors, rerun with: -v
==334== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 2: Trying hands with pairs
Valgrind returned an error status
==339== Memcheck, a memory error detector
==339== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==339== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==339== Command: ./test-eval inp.2.txt
==339== Parent PID: 338
==339== 
==339== Invalid read of size 8
==339==    at 0x401752: find_secondary_pair (eval.c:175)
==339==    by 0x402846: describe_hand (test-eval.c:57)
==339==    by 0x402B21: main (test-eval.c:116)
==339==  Address 0x5205758 is 8 bytes before a block of size 48 alloc'd
==339==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==339==    by 0x401054: add_card_to (deck-c4.c:29)
==339==    by 0x4032BF: hand_from_string (input.c:49)
==339==    by 0x402AA6: main (test-eval.c:110)
==339== 
==339== Invalid read of size 4
==339==    at 0x401755: find_secondary_pair (eval.c:175)
==339==    by 0x402846: describe_hand (test-eval.c:57)
==339==    by 0x402B21: main (test-eval.c:116)
==339==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==339== 
==339== 
==339== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==339==  Access not within mapped region at address 0x0
==339==    at 0x401755: find_secondary_pair (eval.c:175)
==339==    by 0x402846: describe_hand (test-eval.c:57)
==339==    by 0x402B21: main (test-eval.c:116)
==339==  If you believe this happened as a result of a stack
==339==  overflow in your program's main thread (unlikely but
==339==  possible), you can try to increase the size of the
==339==  main thread stack using the --main-stacksize= flag.
==339==  The main thread stack size used in this run was 8388608.
==339== 
==339== HEAP SUMMARY:
==339==     in use at exit: 904 bytes in 18 blocks
==339==   total heap usage: 29 allocs, 11 frees, 9,296 bytes allocated
==339== 
==339== LEAK SUMMARY:
==339==    definitely lost: 0 bytes in 0 blocks
==339==    indirectly lost: 0 bytes in 0 blocks
==339==      possibly lost: 0 bytes in 0 blocks
==339==    still reachable: 904 bytes in 18 blocks
==339==         suppressed: 0 bytes in 0 blocks
==339== Rerun with --leak-check=full to see details of leaked memory
==339== 
==339== For counts of detected and suppressed errors, rerun with: -v
==339== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 3: Trying hands with 2 pairs
Valgrind returned an error status
==344== Memcheck, a memory error detector
==344== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==344== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==344== Command: ./test-eval inp.3.txt
==344== Parent PID: 343
==344== 
==344== Invalid read of size 8
==344==    at 0x401752: find_secondary_pair (eval.c:175)
==344==    by 0x402846: describe_hand (test-eval.c:57)
==344==    by 0x402B21: main (test-eval.c:116)
==344==  Address 0x5205698 is 8 bytes before a block of size 40 alloc'd
==344==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==344==    by 0x401054: add_card_to (deck-c4.c:29)
==344==    by 0x4032BF: hand_from_string (input.c:49)
==344==    by 0x402AA6: main (test-eval.c:110)
==344== 
==344== Invalid read of size 4
==344==    at 0x401755: find_secondary_pair (eval.c:175)
==344==    by 0x402846: describe_hand (test-eval.c:57)
==344==    by 0x402B21: main (test-eval.c:116)
==344==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==344== 
==344== 
==344== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==344==  Access not within mapped region at address 0x0
==344==    at 0x401755: find_secondary_pair (eval.c:175)
==344==    by 0x402846: describe_hand (test-eval.c:57)
==344==    by 0x402B21: main (test-eval.c:116)
==344==  If you believe this happened as a result of a stack
==344==  overflow in your program's main thread (unlikely but
==344==  possible), you can try to increase the size of the
==344==  main thread stack using the --main-stacksize= flag.
==344==  The main thread stack size used in this run was 8388608.
==344== 
==344== HEAP SUMMARY:
==344==     in use at exit: 884 bytes in 17 blocks
==344==   total heap usage: 27 allocs, 10 frees, 9,236 bytes allocated
==344== 
==344== LEAK SUMMARY:
==344==    definitely lost: 0 bytes in 0 blocks
==344==    indirectly lost: 0 bytes in 0 blocks
==344==      possibly lost: 0 bytes in 0 blocks
==344==    still reachable: 884 bytes in 17 blocks
==344==         suppressed: 0 bytes in 0 blocks
==344== Rerun with --leak-check=full to see details of leaked memory
==344== 
==344== For counts of detected and suppressed errors, rerun with: -v
==344== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 4: Trying hands with 3 of a kind
Valgrind returned an error status
==349== Memcheck, a memory error detector
==349== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==349== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==349== Command: ./test-eval inp.4.txt
==349== Parent PID: 348
==349== 
==349== Invalid read of size 8
==349==    at 0x401752: find_secondary_pair (eval.c:175)
==349==    by 0x402846: describe_hand (test-eval.c:57)
==349==    by 0x402B21: main (test-eval.c:116)
==349==  Address 0x5205758 is 8 bytes before a block of size 48 alloc'd
==349==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==349==    by 0x401054: add_card_to (deck-c4.c:29)
==349==    by 0x4032BF: hand_from_string (input.c:49)
==349==    by 0x402AA6: main (test-eval.c:110)
==349== 
==349== Invalid read of size 4
==349==    at 0x401755: find_secondary_pair (eval.c:175)
==349==    by 0x402846: describe_hand (test-eval.c:57)
==349==    by 0x402B21: main (test-eval.c:116)
==349==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==349== 
==349== 
==349== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==349==  Access not within mapped region at address 0x0
==349==    at 0x401755: find_secondary_pair (eval.c:175)
==349==    by 0x402846: describe_hand (test-eval.c:57)
==349==    by 0x402B21: main (test-eval.c:116)
==349==  If you believe this happened as a result of a stack
==349==  overflow in your program's main thread (unlikely but
==349==  possible), you can try to increase the size of the
==349==  main thread stack using the --main-stacksize= flag.
==349==  The main thread stack size used in this run was 8388608.
==349== 
==349== HEAP SUMMARY:
==349==     in use at exit: 920 bytes in 19 blocks
==349==   total heap usage: 31 allocs, 12 frees, 9,352 bytes allocated
==349== 
==349== LEAK SUMMARY:
==349==    definitely lost: 0 bytes in 0 blocks
==349==    indirectly lost: 0 bytes in 0 blocks
==349==      possibly lost: 0 bytes in 0 blocks
==349==    still reachable: 920 bytes in 19 blocks
==349==         suppressed: 0 bytes in 0 blocks
==349== Rerun with --leak-check=full to see details of leaked memory
==349== 
==349== For counts of detected and suppressed errors, rerun with: -v
==349== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 5: Trying hands with straights
Valgrind returned an error status
==354== Memcheck, a memory error detector
==354== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==354== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==354== Command: ./test-eval inp.5.txt
==354== Parent PID: 353
==354== 
==354== Invalid read of size 8
==354==    at 0x401752: find_secondary_pair (eval.c:175)
==354==    by 0x402846: describe_hand (test-eval.c:57)
==354==    by 0x402B21: main (test-eval.c:116)
==354==  Address 0x5205698 is 8 bytes before a block of size 40 alloc'd
==354==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==354==    by 0x401054: add_card_to (deck-c4.c:29)
==354==    by 0x4032BF: hand_from_string (input.c:49)
==354==    by 0x402AA6: main (test-eval.c:110)
==354== 
==354== Invalid read of size 4
==354==    at 0x401755: find_secondary_pair (eval.c:175)
==354==    by 0x402846: describe_hand (test-eval.c:57)
==354==    by 0x402B21: main (test-eval.c:116)
==354==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==354== 
==354== 
==354== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==354==  Access not within mapped region at address 0x0
==354==    at 0x401755: find_secondary_pair (eval.c:175)
==354==    by 0x402846: describe_hand (test-eval.c:57)
==354==    by 0x402B21: main (test-eval.c:116)
==354==  If you believe this happened as a result of a stack
==354==  overflow in your program's main thread (unlikely but
==354==  possible), you can try to increase the size of the
==354==  main thread stack using the --main-stacksize= flag.
==354==  The main thread stack size used in this run was 8388608.
==354== 
==354== HEAP SUMMARY:
==354==     in use at exit: 884 bytes in 17 blocks
==354==   total heap usage: 27 allocs, 10 frees, 9,236 bytes allocated
==354== 
==354== LEAK SUMMARY:
==354==    definitely lost: 0 bytes in 0 blocks
==354==    indirectly lost: 0 bytes in 0 blocks
==354==      possibly lost: 0 bytes in 0 blocks
==354==    still reachable: 884 bytes in 17 blocks
==354==         suppressed: 0 bytes in 0 blocks
==354== Rerun with --leak-check=full to see details of leaked memory
==354== 
==354== For counts of detected and suppressed errors, rerun with: -v
==354== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 6: Trying hands with flushes
Valgrind returned an error status
==359== Memcheck, a memory error detector
==359== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==359== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==359== Command: ./test-eval inp.6.txt
==359== Parent PID: 358
==359== 
==359== Invalid read of size 8
==359==    at 0x401752: find_secondary_pair (eval.c:175)
==359==    by 0x402846: describe_hand (test-eval.c:57)
==359==    by 0x402B21: main (test-eval.c:116)
==359==  Address 0x5205758 is 8 bytes before a block of size 48 alloc'd
==359==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==359==    by 0x401054: add_card_to (deck-c4.c:29)
==359==    by 0x4032BF: hand_from_string (input.c:49)
==359==    by 0x402AA6: main (test-eval.c:110)
==359== 
==359== Invalid read of size 4
==359==    at 0x401755: find_secondary_pair (eval.c:175)
==359==    by 0x402846: describe_hand (test-eval.c:57)
==359==    by 0x402B21: main (test-eval.c:116)
==359==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==359== 
==359== 
==359== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==359==  Access not within mapped region at address 0x0
==359==    at 0x401755: find_secondary_pair (eval.c:175)
==359==    by 0x402846: describe_hand (test-eval.c:57)
==359==    by 0x402B21: main (test-eval.c:116)
==359==  If you believe this happened as a result of a stack
==359==  overflow in your program's main thread (unlikely but
==359==  possible), you can try to increase the size of the
==359==  main thread stack using the --main-stacksize= flag.
==359==  The main thread stack size used in this run was 8388608.
==359== 
==359== HEAP SUMMARY:
==359==     in use at exit: 920 bytes in 19 blocks
==359==   total heap usage: 31 allocs, 12 frees, 9,352 bytes allocated
==359== 
==359== LEAK SUMMARY:
==359==    definitely lost: 0 bytes in 0 blocks
==359==    indirectly lost: 0 bytes in 0 blocks
==359==      possibly lost: 0 bytes in 0 blocks
==359==    still reachable: 920 bytes in 19 blocks
==359==         suppressed: 0 bytes in 0 blocks
==359== Rerun with --leak-check=full to see details of leaked memory
==359== 
==359== For counts of detected and suppressed errors, rerun with: -v
==359== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 7: Trying hands with full houses
Valgrind returned an error status
==364== Memcheck, a memory error detector
==364== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==364== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==364== Command: ./test-eval inp.7.txt
==364== Parent PID: 363
==364== 
==364== Invalid read of size 8
==364==    at 0x401752: find_secondary_pair (eval.c:175)
==364==    by 0x402846: describe_hand (test-eval.c:57)
==364==    by 0x402B21: main (test-eval.c:116)
==364==  Address 0x5205818 is 8 bytes before a block of size 56 alloc'd
==364==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==364==    by 0x401054: add_card_to (deck-c4.c:29)
==364==    by 0x4032BF: hand_from_string (input.c:49)
==364==    by 0x402AA6: main (test-eval.c:110)
==364== 
==364== Invalid read of size 4
==364==    at 0x401755: find_secondary_pair (eval.c:175)
==364==    by 0x402846: describe_hand (test-eval.c:57)
==364==    by 0x402B21: main (test-eval.c:116)
==364==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==364== 
==364== 
==364== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==364==  Access not within mapped region at address 0x0
==364==    at 0x401755: find_secondary_pair (eval.c:175)
==364==    by 0x402846: describe_hand (test-eval.c:57)
==364==    by 0x402B21: main (test-eval.c:116)
==364==  If you believe this happened as a result of a stack
==364==  overflow in your program's main thread (unlikely but
==364==  possible), you can try to increase the size of the
==364==  main thread stack using the --main-stacksize= flag.
==364==  The main thread stack size used in this run was 8388608.
==364== 
==364== HEAP SUMMARY:
==364==     in use at exit: 956 bytes in 21 blocks
==364==   total heap usage: 35 allocs, 14 frees, 9,484 bytes allocated
==364== 
==364== LEAK SUMMARY:
==364==    definitely lost: 0 bytes in 0 blocks
==364==    indirectly lost: 0 bytes in 0 blocks
==364==      possibly lost: 0 bytes in 0 blocks
==364==    still reachable: 956 bytes in 21 blocks
==364==         suppressed: 0 bytes in 0 blocks
==364== Rerun with --leak-check=full to see details of leaked memory
==364== 
==364== For counts of detected and suppressed errors, rerun with: -v
==364== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 8: Trying hands with 4 of a kind
Valgrind returned an error status
==369== Memcheck, a memory error detector
==369== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==369== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==369== Command: ./test-eval inp.8.txt
==369== Parent PID: 368
==369== 
==369== Invalid read of size 8
==369==    at 0x401752: find_secondary_pair (eval.c:175)
==369==    by 0x402846: describe_hand (test-eval.c:57)
==369==    by 0x402B21: main (test-eval.c:116)
==369==  Address 0x5205758 is 8 bytes before a block of size 48 alloc'd
==369==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==369==    by 0x401054: add_card_to (deck-c4.c:29)
==369==    by 0x4032BF: hand_from_string (input.c:49)
==369==    by 0x402AA6: main (test-eval.c:110)
==369== 
==369== Invalid read of size 4
==369==    at 0x401755: find_secondary_pair (eval.c:175)
==369==    by 0x402846: describe_hand (test-eval.c:57)
==369==    by 0x402B21: main (test-eval.c:116)
==369==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==369== 
==369== 
==369== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==369==  Access not within mapped region at address 0x0
==369==    at 0x401755: find_secondary_pair (eval.c:175)
==369==    by 0x402846: describe_hand (test-eval.c:57)
==369==    by 0x402B21: main (test-eval.c:116)
==369==  If you believe this happened as a result of a stack
==369==  overflow in your program's main thread (unlikely but
==369==  possible), you can try to increase the size of the
==369==  main thread stack using the --main-stacksize= flag.
==369==  The main thread stack size used in this run was 8388608.
==369== 
==369== HEAP SUMMARY:
==369==     in use at exit: 920 bytes in 19 blocks
==369==   total heap usage: 31 allocs, 12 frees, 9,352 bytes allocated
==369== 
==369== LEAK SUMMARY:
==369==    definitely lost: 0 bytes in 0 blocks
==369==    indirectly lost: 0 bytes in 0 blocks
==369==      possibly lost: 0 bytes in 0 blocks
==369==    still reachable: 920 bytes in 19 blocks
==369==         suppressed: 0 bytes in 0 blocks
==369== Rerun with --leak-check=full to see details of leaked memory
==369== 
==369== For counts of detected and suppressed errors, rerun with: -v
==369== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 9: Trying hands with straight flushes
Valgrind returned an error status
==374== Memcheck, a memory error detector
==374== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==374== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==374== Command: ./test-eval inp.9.txt
==374== Parent PID: 373
==374== 
==374== Invalid read of size 8
==374==    at 0x401752: find_secondary_pair (eval.c:175)
==374==    by 0x402846: describe_hand (test-eval.c:57)
==374==    by 0x402B21: main (test-eval.c:116)
==374==  Address 0x5205698 is 8 bytes before a block of size 40 alloc'd
==374==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==374==    by 0x401054: add_card_to (deck-c4.c:29)
==374==    by 0x4032BF: hand_from_string (input.c:49)
==374==    by 0x402AA6: main (test-eval.c:110)
==374== 
==374== Invalid read of size 4
==374==    at 0x401755: find_secondary_pair (eval.c:175)
==374==    by 0x402846: describe_hand (test-eval.c:57)
==374==    by 0x402B21: main (test-eval.c:116)
==374==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==374== 
==374== 
==374== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==374==  Access not within mapped region at address 0x0
==374==    at 0x401755: find_secondary_pair (eval.c:175)
==374==    by 0x402846: describe_hand (test-eval.c:57)
==374==    by 0x402B21: main (test-eval.c:116)
==374==  If you believe this happened as a result of a stack
==374==  overflow in your program's main thread (unlikely but
==374==  possible), you can try to increase the size of the
==374==  main thread stack using the --main-stacksize= flag.
==374==  The main thread stack size used in this run was 8388608.
==374== 
==374== HEAP SUMMARY:
==374==     in use at exit: 884 bytes in 17 blocks
==374==   total heap usage: 27 allocs, 10 frees, 9,236 bytes allocated
==374== 
==374== LEAK SUMMARY:
==374==    definitely lost: 0 bytes in 0 blocks
==374==    indirectly lost: 0 bytes in 0 blocks
==374==      possibly lost: 0 bytes in 0 blocks
==374==    still reachable: 884 bytes in 17 blocks
==374==         suppressed: 0 bytes in 0 blocks
==374== Rerun with --leak-check=full to see details of leaked memory
==374== 
==374== For counts of detected and suppressed errors, rerun with: -v
==374== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 10: Trying each type of hand ranking
Valgrind returned an error status
==379== Memcheck, a memory error detector
==379== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==379== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==379== Command: ./test-eval inp.10.txt
==379== Parent PID: 378
==379== 
==379== Invalid read of size 8
==379==    at 0x401752: find_secondary_pair (eval.c:175)
==379==    by 0x402846: describe_hand (test-eval.c:57)
==379==    by 0x402B21: main (test-eval.c:116)
==379==  Address 0x5205758 is 8 bytes before a block of size 48 alloc'd
==379==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==379==    by 0x401054: add_card_to (deck-c4.c:29)
==379==    by 0x4032BF: hand_from_string (input.c:49)
==379==    by 0x402AA6: main (test-eval.c:110)
==379== 
==379== Invalid read of size 4
==379==    at 0x401755: find_secondary_pair (eval.c:175)
==379==    by 0x402846: describe_hand (test-eval.c:57)
==379==    by 0x402B21: main (test-eval.c:116)
==379==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==379== 
==379== 
==379== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==379==  Access not within mapped region at address 0x0
==379==    at 0x401755: find_secondary_pair (eval.c:175)
==379==    by 0x402846: describe_hand (test-eval.c:57)
==379==    by 0x402B21: main (test-eval.c:116)
==379==  If you believe this happened as a result of a stack
==379==  overflow in your program's main thread (unlikely but
==379==  possible), you can try to increase the size of the
==379==  main thread stack using the --main-stacksize= flag.
==379==  The main thread stack size used in this run was 8388608.
==379== 
==379== HEAP SUMMARY:
==379==     in use at exit: 920 bytes in 19 blocks
==379==   total heap usage: 31 allocs, 12 frees, 9,352 bytes allocated
==379== 
==379== LEAK SUMMARY:
==379==    definitely lost: 0 bytes in 0 blocks
==379==    indirectly lost: 0 bytes in 0 blocks
==379==      possibly lost: 0 bytes in 0 blocks
==379==    still reachable: 920 bytes in 19 blocks
==379==         suppressed: 0 bytes in 0 blocks
==379== Rerun with --leak-check=full to see details of leaked memory
==379== 
==379== For counts of detected and suppressed errors, rerun with: -v
==379== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)

Overall Grade: F
