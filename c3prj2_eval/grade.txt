Grading at Mon Dec 30 22:11:41 UTC 2019
Compiling your code
rm -f test poker cards.o my-test-main.o *~
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o deck.o deck.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o eval.o eval.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o cards.o cards.c
gcc -o test-eval -ggdb3 deck.o deck-c4.o eval-c4.o eval.o test-eval.o cards.o input.o future.o
Testcase 1: Trying hands with nothing
Valgrind returned an error status
==209== Memcheck, a memory error detector
==209== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==209== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==209== Command: ./test-eval inp.1.txt
==209== Parent PID: 208
==209== 
==209== Use of uninitialised value of size 8
==209==    at 0x400C02: print_hand (deck.c:19)
==209==    by 0x4028AF: describe_hand (test-eval.c:74)
==209==    by 0x402A8F: main (test-eval.c:116)
==209== 
==209== Invalid read of size 8
==209==    at 0x400C02: print_hand (deck.c:19)
==209==    by 0x4028AF: describe_hand (test-eval.c:74)
==209==    by 0x402A8F: main (test-eval.c:116)
==209==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==209== 
==209== 
==209== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==209==  Access not within mapped region at address 0x0
==209==    at 0x400C02: print_hand (deck.c:19)
==209==    by 0x4028AF: describe_hand (test-eval.c:74)
==209==    by 0x402A8F: main (test-eval.c:116)
==209==  If you believe this happened as a result of a stack
==209==  overflow in your program's main thread (unlikely but
==209==  possible), you can try to increase the size of the
==209==  main thread stack using the --main-stacksize= flag.
==209==  The main thread stack size used in this run was 8388608.
==209== 
==209== HEAP SUMMARY:
==209==     in use at exit: 864 bytes in 16 blocks
==209==   total heap usage: 202 allocs, 186 frees, 12,472 bytes allocated
==209== 
==209== LEAK SUMMARY:
==209==    definitely lost: 0 bytes in 0 blocks
==209==    indirectly lost: 0 bytes in 0 blocks
==209==      possibly lost: 0 bytes in 0 blocks
==209==    still reachable: 864 bytes in 16 blocks
==209==         suppressed: 0 bytes in 0 blocks
==209== Rerun with --leak-check=full to see details of leaked memory
==209== 
==209== For counts of detected and suppressed errors, rerun with: -v
==209== Use --track-origins=yes to see where uninitialised values come from
==209== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 2: Trying hands with pairs
Valgrind returned an error status
==214== Memcheck, a memory error detector
==214== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==214== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==214== Command: ./test-eval inp.2.txt
==214== Parent PID: 213
==214== 
==214== Use of uninitialised value of size 8
==214==    at 0x400C02: print_hand (deck.c:19)
==214==    by 0x4028AF: describe_hand (test-eval.c:74)
==214==    by 0x402AAF: main (test-eval.c:119)
==214== 
==214== Invalid read of size 8
==214==    at 0x400C02: print_hand (deck.c:19)
==214==    by 0x4028AF: describe_hand (test-eval.c:74)
==214==    by 0x402AAF: main (test-eval.c:119)
==214==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==214== 
==214== 
==214== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==214==  Access not within mapped region at address 0x0
==214==    at 0x400C02: print_hand (deck.c:19)
==214==    by 0x4028AF: describe_hand (test-eval.c:74)
==214==    by 0x402AAF: main (test-eval.c:119)
==214==  If you believe this happened as a result of a stack
==214==  overflow in your program's main thread (unlikely but
==214==  possible), you can try to increase the size of the
==214==  main thread stack using the --main-stacksize= flag.
==214==  The main thread stack size used in this run was 8388608.
==214== 
==214== HEAP SUMMARY:
==214==     in use at exit: 880 bytes in 17 blocks
==214==   total heap usage: 32 allocs, 15 frees, 9,360 bytes allocated
==214== 
==214== LEAK SUMMARY:
==214==    definitely lost: 0 bytes in 0 blocks
==214==    indirectly lost: 0 bytes in 0 blocks
==214==      possibly lost: 0 bytes in 0 blocks
==214==    still reachable: 880 bytes in 17 blocks
==214==         suppressed: 0 bytes in 0 blocks
==214== Rerun with --leak-check=full to see details of leaked memory
==214== 
==214== For counts of detected and suppressed errors, rerun with: -v
==214== Use --track-origins=yes to see where uninitialised values come from
==214== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 3: Trying hands with 2 pairs
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 4: Trying hands with 3 of a kind
Valgrind returned an error status
==231== Memcheck, a memory error detector
==231== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==231== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==231== Command: ./test-eval inp.4.txt
==231== Parent PID: 230
==231== 
==231== Use of uninitialised value of size 8
==231==    at 0x400C02: print_hand (deck.c:19)
==231==    by 0x4028AF: describe_hand (test-eval.c:74)
==231==    by 0x402A8F: main (test-eval.c:116)
==231== 
==231== Invalid read of size 8
==231==    at 0x400C02: print_hand (deck.c:19)
==231==    by 0x4028AF: describe_hand (test-eval.c:74)
==231==    by 0x402A8F: main (test-eval.c:116)
==231==  Address 0x520bd30 is 0 bytes inside a block of size 24 free'd
==231==    at 0x4C2EDEB: free (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==231==    by 0x4020A9: evaluate_hand (eval.c:515)
==231==    by 0x402864: describe_hand (test-eval.c:68)
==231==    by 0x402A8F: main (test-eval.c:116)
==231==  Block was alloc'd at
==231==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==231==    by 0x4013DE: get_match_counts (eval-c4.c:70)
==231==    by 0x402027: evaluate_hand (eval.c:510)
==231==    by 0x402864: describe_hand (test-eval.c:68)
==231==    by 0x402A8F: main (test-eval.c:116)
==231== 
==231== 
==231== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==231==  Access not within mapped region at address 0x0
==231==    at 0x400C02: print_hand (deck.c:19)
==231==    by 0x4028AF: describe_hand (test-eval.c:74)
==231==    by 0x402A8F: main (test-eval.c:116)
==231==  If you believe this happened as a result of a stack
==231==  overflow in your program's main thread (unlikely but
==231==  possible), you can try to increase the size of the
==231==  main thread stack using the --main-stacksize= flag.
==231==  The main thread stack size used in this run was 8388608.
==231== 
==231== HEAP SUMMARY:
==231==     in use at exit: 896 bytes in 18 blocks
==231==   total heap usage: 264 allocs, 246 frees, 13,664 bytes allocated
==231== 
==231== LEAK SUMMARY:
==231==    definitely lost: 0 bytes in 0 blocks
==231==    indirectly lost: 0 bytes in 0 blocks
==231==      possibly lost: 0 bytes in 0 blocks
==231==    still reachable: 896 bytes in 18 blocks
==231==         suppressed: 0 bytes in 0 blocks
==231== Rerun with --leak-check=full to see details of leaked memory
==231== 
==231== For counts of detected and suppressed errors, rerun with: -v
==231== Use --track-origins=yes to see where uninitialised values come from
==231== ERROR SUMMARY: 4 errors from 2 contexts (suppressed: 0 from 0)
Testcase 5: Trying hands with straights
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 6: Trying hands with flushes
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 7: Trying hands with full houses
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 8: Trying hands with 4 of a kind
Valgrind returned an error status
==272== Memcheck, a memory error detector
==272== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==272== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==272== Command: ./test-eval inp.8.txt
==272== Parent PID: 271
==272== 
==272== Use of uninitialised value of size 8
==272==    at 0x400C02: print_hand (deck.c:19)
==272==    by 0x4028AF: describe_hand (test-eval.c:74)
==272==    by 0x402AAF: main (test-eval.c:119)
==272== 
==272== Invalid read of size 8
==272==    at 0x400C02: print_hand (deck.c:19)
==272==    by 0x4028AF: describe_hand (test-eval.c:74)
==272==    by 0x402AAF: main (test-eval.c:119)
==272==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==272== 
==272== 
==272== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==272==  Access not within mapped region at address 0x0
==272==    at 0x400C02: print_hand (deck.c:19)
==272==    by 0x4028AF: describe_hand (test-eval.c:74)
==272==    by 0x402AAF: main (test-eval.c:119)
==272==  If you believe this happened as a result of a stack
==272==  overflow in your program's main thread (unlikely but
==272==  possible), you can try to increase the size of the
==272==  main thread stack using the --main-stacksize= flag.
==272==  The main thread stack size used in this run was 8388608.
==272== 
==272== HEAP SUMMARY:
==272==     in use at exit: 896 bytes in 18 blocks
==272==   total heap usage: 150 allocs, 132 frees, 11,568 bytes allocated
==272== 
==272== LEAK SUMMARY:
==272==    definitely lost: 0 bytes in 0 blocks
==272==    indirectly lost: 0 bytes in 0 blocks
==272==      possibly lost: 0 bytes in 0 blocks
==272==    still reachable: 896 bytes in 18 blocks
==272==         suppressed: 0 bytes in 0 blocks
==272== Rerun with --leak-check=full to see details of leaked memory
==272== 
==272== For counts of detected and suppressed errors, rerun with: -v
==272== Use --track-origins=yes to see where uninitialised values come from
==272== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 9: Trying hands with straight flushes
 Checking the output 
Line_53_did_not_match
Your file did not match the expected ouput
 - Output did not match, testcase failed
Hand 1:								Hand 1:
--------							--------
As Ks Qs Js 0s 							As Ks Qs Js 0s 
 - Flush in suit s						 - Flush in suit s
 - Straight flush at index 0					 - Straight flush at index 0
 - The most of a kind is 1 of a kind (at index 0 / value A)	 - The most of a kind is 1 of a kind (at index 0 / value A)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: STRAIGHT_FLUSH			 - evaluate_hand's ranking: STRAIGHT_FLUSH
 - 5 cards used for hand: As Ks Qs Js 0s 			 - 5 cards used for hand: As Ks Qs Js 0s 
Hand 2:								Hand 2:
--------							--------
Kh Qh Jh 0h 9h 							Kh Qh Jh 0h 9h 
 - Flush in suit h						 - Flush in suit h
 - Straight flush at index 0					 - Straight flush at index 0
 - The most of a kind is 1 of a kind (at index 0 / value K)	 - The most of a kind is 1 of a kind (at index 0 / value K)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: STRAIGHT_FLUSH			 - evaluate_hand's ranking: STRAIGHT_FLUSH
 - 5 cards used for hand: Kh Qh Jh 0h 9h 			 - 5 cards used for hand: Kh Qh Jh 0h 9h 
Comparison : 							Comparison : 
--------------							--------------
Hand 1 wins!							Hand 1 wins!
============================					============================
Hand 1:								Hand 1:
--------							--------
As Ks Qs Js 0s 9s 8s 						As Ks Qs Js 0s 9s 8s 
 - Flush in suit s						 - Flush in suit s
 - Straight flush at index 0					 - Straight flush at index 0
 - Straight flush at index 1					 - Straight flush at index 1
 - Straight flush at index 2					 - Straight flush at index 2
 - The most of a kind is 1 of a kind (at index 0 / value A)	 - The most of a kind is 1 of a kind (at index 0 / value A)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: STRAIGHT_FLUSH			 - evaluate_hand's ranking: STRAIGHT_FLUSH
 - 5 cards used for hand: As Ks Qs Js 0s 			 - 5 cards used for hand: As Ks Qs Js 0s 
Hand 2:								Hand 2:
--------							--------
Kh Qh Jh 0h 9h 8h 7h 						Kh Qh Jh 0h 9h 8h 7h 
 - Flush in suit h						 - Flush in suit h
 - Straight flush at index 0					 - Straight flush at index 0
 - Straight flush at index 1					 - Straight flush at index 1
 - Straight flush at index 2					 - Straight flush at index 2
 - The most of a kind is 1 of a kind (at index 0 / value K)	 - The most of a kind is 1 of a kind (at index 0 / value K)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: STRAIGHT_FLUSH			 - evaluate_hand's ranking: STRAIGHT_FLUSH
 - 5 cards used for hand: Kh Qh Jh 0h 9h 			 - 5 cards used for hand: Kh Qh Jh 0h 9h 
Comparison : 							Comparison : 
--------------							--------------
Hand 1 wins!							Hand 1 wins!
============================					============================
Hand 1:								Hand 1:
--------							--------
Ac As Kc Ks Qs Js 0s 						Ac As Kc Ks Qs Js 0s 
 - Flush in suit s						 - Flush in suit s
 - Straight at index 0					      |	 - Straight flush at index 0
 - Straight flush at index 1					 - Straight flush at index 1
 - The most of a kind is 2 of a kind (at index 0 / value A)	 - The most of a kind is 2 of a kind (at index 0 / value A)
 - Secondary pair at index 2 (value K)				 - Secondary pair at index 2 (value K)
 - evaluate_hand's ranking: STRAIGHT_FLUSH		      <
 - 5 cards used for hand: As Ks Qs Js 0s 		      <
Hand 2:							      <
--------						      <
Ad Kh Qh Jh Js 0h 9h 					      <
 - Flush in suit h					      <
 - Straight at index 0					      <
 - Straight flush at index 1				      <
 - The most of a kind is 2 of a kind (at index 3 / value J)   <
 - No secondary pair					      <
 - evaluate_hand's ranking: STRAIGHT_FLUSH		      <
 - 5 cards used for hand: Kh Qh Jh 0h 9h 		      <
Comparison : 						      <
--------------						      <
Hand 1 wins!						      <
============================				      <
Hand 1:							      <
--------						      <
Ah Kc 5h 4h 3h 2h 					      <
 - Flush in suit h					      <
 - Straight flush at index 0				      <
 - The most of a kind is 1 of a kind (at index 0 / value A)   <
 - No secondary pair					      <
 - evaluate_hand's ranking: STRAIGHT_FLUSH		      <
 - 5 cards used for hand: 5h 4h 3h 2h Ah 		      <
Hand 2:							      <
--------						      <
Ac 6c 5c 4c 3c 2c 					      <
 - Flush in suit c					      <
 - Straight flush at index 0				      <
 - Straight flush at index 1				      <
 - The most of a kind is 1 of a kind (at index 0 / value A)   <
 - No secondary pair					      <
 - evaluate_hand's ranking: STRAIGHT_FLUSH		      <
 - 5 cards used for hand: 5c 4c 3c 2c Ac 		      <
Comparison : 						      <
--------------						      <
Tie							      <
============================				      <
Hand 1:							      <
--------						      <
As Ks Qs Js 0s 						      <
 - Flush in suit s					      <
 - Straight flush at index 0				      <
 - The most of a kind is 1 of a kind (at index 0 / value A)   <
 - No secondary pair					      <
 - evaluate_hand's ranking: STRAIGHT_FLUSH		      <
 - 5 cards used for hand: As Ks Qs Js 0s 		      <
Hand 2:							      <
--------						      <
As 5s 4s 3s 2s 						      <
 - Flush in suit s					      <
 - Straight flush at index 0				      <
 - The most of a kind is 1 of a kind (at index 0 / value A)   <
 - No secondary pair					      <
 - evaluate_hand's ranking: STRAIGHT_FLUSH		      <
 - 5 cards used for hand: 5s 4s 3s 2s As 		      <
Comparison : 						      <
--------------						      <
Hand 1 wins!						      <
============================				      <
Testcase 10: Trying each type of hand ranking
Valgrind returned an error status
==290== Memcheck, a memory error detector
==290== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==290== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==290== Command: ./test-eval inp.10.txt
==290== Parent PID: 289
==290== 
==290== Use of uninitialised value of size 8
==290==    at 0x400C02: print_hand (deck.c:19)
==290==    by 0x4028AF: describe_hand (test-eval.c:74)
==290==    by 0x402AAF: main (test-eval.c:119)
==290== 
==290== Invalid read of size 8
==290==    at 0x400C02: print_hand (deck.c:19)
==290==    by 0x4028AF: describe_hand (test-eval.c:74)
==290==    by 0x402AAF: main (test-eval.c:119)
==290==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==290== 
==290== 
==290== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==290==  Access not within mapped region at address 0x0
==290==    at 0x400C02: print_hand (deck.c:19)
==290==    by 0x4028AF: describe_hand (test-eval.c:74)
==290==    by 0x402AAF: main (test-eval.c:119)
==290==  If you believe this happened as a result of a stack
==290==  overflow in your program's main thread (unlikely but
==290==  possible), you can try to increase the size of the
==290==  main thread stack using the --main-stacksize= flag.
==290==  The main thread stack size used in this run was 8388608.
==290== 
==290== HEAP SUMMARY:
==290==     in use at exit: 880 bytes in 17 blocks
==290==   total heap usage: 210 allocs, 193 frees, 12,716 bytes allocated
==290== 
==290== LEAK SUMMARY:
==290==    definitely lost: 0 bytes in 0 blocks
==290==    indirectly lost: 0 bytes in 0 blocks
==290==      possibly lost: 0 bytes in 0 blocks
==290==    still reachable: 880 bytes in 17 blocks
==290==         suppressed: 0 bytes in 0 blocks
==290== Rerun with --leak-check=full to see details of leaked memory
==290== 
==290== For counts of detected and suppressed errors, rerun with: -v
==290== Use --track-origins=yes to see where uninitialised values come from
==290== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)

Overall Grade: F
