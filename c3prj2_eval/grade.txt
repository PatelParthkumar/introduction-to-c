Grading at Fri Dec 27 04:16:59 UTC 2019
Compiling your code
rm -f test poker cards.o my-test-main.o *~
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o deck.o deck.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o eval.o eval.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o cards.o cards.c
gcc -o test-eval -ggdb3 deck.o deck-c4.o eval-c4.o eval.o test-eval.o cards.o input.o future.o
Testcase 1: Trying hands with nothing
Valgrind returned an error status
==1186== Memcheck, a memory error detector
==1186== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1186== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1186== Command: ./test-eval inp.1.txt
==1186== Parent PID: 1185
==1186== 
==1186== Use of uninitialised value of size 8
==1186==    at 0x400C02: print_hand (deck.c:19)
==1186==    by 0x4023A8: describe_hand (test-eval.c:74)
==1186==    by 0x402588: main (test-eval.c:116)
==1186== 
==1186== Conditional jump or move depends on uninitialised value(s)
==1186==    at 0x4027C8: value_letter (cards.c:49)
==1186==    by 0x40287F: print_card (cards.c:103)
==1186==    by 0x400C09: print_hand (deck.c:19)
==1186==    by 0x4023A8: describe_hand (test-eval.c:74)
==1186==    by 0x402588: main (test-eval.c:116)
==1186== 
==1186== Conditional jump or move depends on uninitialised value(s)
==1186==    at 0x4027D8: value_letter (cards.c:51)
==1186==    by 0x40287F: print_card (cards.c:103)
==1186==    by 0x400C09: print_hand (deck.c:19)
==1186==    by 0x4023A8: describe_hand (test-eval.c:74)
==1186==    by 0x402588: main (test-eval.c:116)
==1186== 
==1186== Conditional jump or move depends on uninitialised value(s)
==1186==    at 0x4027E7: value_letter (cards.c:54)
==1186==    by 0x40287F: print_card (cards.c:103)
==1186==    by 0x400C09: print_hand (deck.c:19)
==1186==    by 0x4023A8: describe_hand (test-eval.c:74)
==1186==    by 0x402588: main (test-eval.c:116)
==1186== 
==1186== Conditional jump or move depends on uninitialised value(s)
==1186==    at 0x4027EC: value_letter (cards.c:54)
==1186==    by 0x40287F: print_card (cards.c:103)
==1186==    by 0x400C09: print_hand (deck.c:19)
==1186==    by 0x4023A8: describe_hand (test-eval.c:74)
==1186==    by 0x402588: main (test-eval.c:116)
==1186== 
==1186== Conditional jump or move depends on uninitialised value(s)
==1186==    at 0x4027F8: value_letter (cards.c:54)
==1186==    by 0x40287F: print_card (cards.c:103)
==1186==    by 0x400C09: print_hand (deck.c:19)
==1186==    by 0x4023A8: describe_hand (test-eval.c:74)
==1186==    by 0x402588: main (test-eval.c:116)
==1186== 
==1186== Conditional jump or move depends on uninitialised value(s)
==1186==    at 0x4027FD: value_letter (cards.c:54)
==1186==    by 0x40287F: print_card (cards.c:103)
==1186==    by 0x400C09: print_hand (deck.c:19)
==1186==    by 0x4023A8: describe_hand (test-eval.c:74)
==1186==    by 0x402588: main (test-eval.c:116)
==1186== 
==1186== Conditional jump or move depends on uninitialised value(s)
==1186==    at 0x402832: suit_letter (cards.c:82)
==1186==    by 0x402891: print_card (cards.c:104)
==1186==    by 0x400C09: print_hand (deck.c:19)
==1186==    by 0x4023A8: describe_hand (test-eval.c:74)
==1186==    by 0x402588: main (test-eval.c:116)
==1186== 
==1186== Conditional jump or move depends on uninitialised value(s)
==1186==    at 0x402837: suit_letter (cards.c:82)
==1186==    by 0x402891: print_card (cards.c:104)
==1186==    by 0x400C09: print_hand (deck.c:19)
==1186==    by 0x4023A8: describe_hand (test-eval.c:74)
==1186==    by 0x402588: main (test-eval.c:116)
==1186== 
==1186== Invalid read of size 8
==1186==    at 0x400C02: print_hand (deck.c:19)
==1186==    by 0x4023A8: describe_hand (test-eval.c:74)
==1186==    by 0x402588: main (test-eval.c:116)
==1186==  Address 0x400001102 is not stack'd, malloc'd or (recently) free'd
==1186== 
==1186== 
==1186== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1186==  Access not within mapped region at address 0x400001102
==1186==    at 0x400C02: print_hand (deck.c:19)
==1186==    by 0x4023A8: describe_hand (test-eval.c:74)
==1186==    by 0x402588: main (test-eval.c:116)
==1186==  If you believe this happened as a result of a stack
==1186==  overflow in your program's main thread (unlikely but
==1186==  possible), you can try to increase the size of the
==1186==  main thread stack using the --main-stacksize= flag.
==1186==  The main thread stack size used in this run was 8388608.
==1186== 
==1186== HEAP SUMMARY:
==1186==     in use at exit: 896 bytes in 18 blocks
==1186==   total heap usage: 32 allocs, 14 frees, 9,376 bytes allocated
==1186== 
==1186== LEAK SUMMARY:
==1186==    definitely lost: 0 bytes in 0 blocks
==1186==    indirectly lost: 0 bytes in 0 blocks
==1186==      possibly lost: 0 bytes in 0 blocks
==1186==    still reachable: 896 bytes in 18 blocks
==1186==         suppressed: 0 bytes in 0 blocks
==1186== Rerun with --leak-check=full to see details of leaked memory
==1186== 
==1186== For counts of detected and suppressed errors, rerun with: -v
==1186== Use --track-origins=yes to see where uninitialised values come from
==1186== ERROR SUMMARY: 11 errors from 10 contexts (suppressed: 0 from 0)
Testcase 2: Trying hands with pairs
Valgrind returned an error status
==1191== Memcheck, a memory error detector
==1191== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1191== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1191== Command: ./test-eval inp.2.txt
==1191== Parent PID: 1190
==1191== 
==1191== Use of uninitialised value of size 8
==1191==    at 0x400C02: print_hand (deck.c:19)
==1191==    by 0x4023A8: describe_hand (test-eval.c:74)
==1191==    by 0x402588: main (test-eval.c:116)
==1191== 
==1191== Conditional jump or move depends on uninitialised value(s)
==1191==    at 0x4027C8: value_letter (cards.c:49)
==1191==    by 0x40287F: print_card (cards.c:103)
==1191==    by 0x400C09: print_hand (deck.c:19)
==1191==    by 0x4023A8: describe_hand (test-eval.c:74)
==1191==    by 0x402588: main (test-eval.c:116)
==1191== 
==1191== Conditional jump or move depends on uninitialised value(s)
==1191==    at 0x4027D8: value_letter (cards.c:51)
==1191==    by 0x40287F: print_card (cards.c:103)
==1191==    by 0x400C09: print_hand (deck.c:19)
==1191==    by 0x4023A8: describe_hand (test-eval.c:74)
==1191==    by 0x402588: main (test-eval.c:116)
==1191== 
==1191== Conditional jump or move depends on uninitialised value(s)
==1191==    at 0x4027E7: value_letter (cards.c:54)
==1191==    by 0x40287F: print_card (cards.c:103)
==1191==    by 0x400C09: print_hand (deck.c:19)
==1191==    by 0x4023A8: describe_hand (test-eval.c:74)
==1191==    by 0x402588: main (test-eval.c:116)
==1191== 
==1191== Conditional jump or move depends on uninitialised value(s)
==1191==    at 0x4027EC: value_letter (cards.c:54)
==1191==    by 0x40287F: print_card (cards.c:103)
==1191==    by 0x400C09: print_hand (deck.c:19)
==1191==    by 0x4023A8: describe_hand (test-eval.c:74)
==1191==    by 0x402588: main (test-eval.c:116)
==1191== 
==1191== Conditional jump or move depends on uninitialised value(s)
==1191==    at 0x4027F8: value_letter (cards.c:54)
==1191==    by 0x40287F: print_card (cards.c:103)
==1191==    by 0x400C09: print_hand (deck.c:19)
==1191==    by 0x4023A8: describe_hand (test-eval.c:74)
==1191==    by 0x402588: main (test-eval.c:116)
==1191== 
==1191== Conditional jump or move depends on uninitialised value(s)
==1191==    at 0x4027FD: value_letter (cards.c:54)
==1191==    by 0x40287F: print_card (cards.c:103)
==1191==    by 0x400C09: print_hand (deck.c:19)
==1191==    by 0x4023A8: describe_hand (test-eval.c:74)
==1191==    by 0x402588: main (test-eval.c:116)
==1191== 
==1191== Conditional jump or move depends on uninitialised value(s)
==1191==    at 0x402832: suit_letter (cards.c:82)
==1191==    by 0x402891: print_card (cards.c:104)
==1191==    by 0x400C09: print_hand (deck.c:19)
==1191==    by 0x4023A8: describe_hand (test-eval.c:74)
==1191==    by 0x402588: main (test-eval.c:116)
==1191== 
==1191== Conditional jump or move depends on uninitialised value(s)
==1191==    at 0x402837: suit_letter (cards.c:82)
==1191==    by 0x402891: print_card (cards.c:104)
==1191==    by 0x400C09: print_hand (deck.c:19)
==1191==    by 0x4023A8: describe_hand (test-eval.c:74)
==1191==    by 0x402588: main (test-eval.c:116)
==1191== 
==1191== Invalid read of size 8
==1191==    at 0x400C02: print_hand (deck.c:19)
==1191==    by 0x4023A8: describe_hand (test-eval.c:74)
==1191==    by 0x402588: main (test-eval.c:116)
==1191==  Address 0x400001102 is not stack'd, malloc'd or (recently) free'd
==1191== 
==1191== 
==1191== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1191==  Access not within mapped region at address 0x400001102
==1191==    at 0x400C02: print_hand (deck.c:19)
==1191==    by 0x4023A8: describe_hand (test-eval.c:74)
==1191==    by 0x402588: main (test-eval.c:116)
==1191==  If you believe this happened as a result of a stack
==1191==  overflow in your program's main thread (unlikely but
==1191==  possible), you can try to increase the size of the
==1191==  main thread stack using the --main-stacksize= flag.
==1191==  The main thread stack size used in this run was 8388608.
==1191== 
==1191== HEAP SUMMARY:
==1191==     in use at exit: 880 bytes in 17 blocks
==1191==   total heap usage: 30 allocs, 13 frees, 9,320 bytes allocated
==1191== 
==1191== LEAK SUMMARY:
==1191==    definitely lost: 0 bytes in 0 blocks
==1191==    indirectly lost: 0 bytes in 0 blocks
==1191==      possibly lost: 0 bytes in 0 blocks
==1191==    still reachable: 880 bytes in 17 blocks
==1191==         suppressed: 0 bytes in 0 blocks
==1191== Rerun with --leak-check=full to see details of leaked memory
==1191== 
==1191== For counts of detected and suppressed errors, rerun with: -v
==1191== Use --track-origins=yes to see where uninitialised values come from
==1191== ERROR SUMMARY: 11 errors from 10 contexts (suppressed: 0 from 0)
Testcase 3: Trying hands with 2 pairs
Valgrind returned an error status
==1196== Memcheck, a memory error detector
==1196== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1196== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1196== Command: ./test-eval inp.3.txt
==1196== Parent PID: 1195
==1196== 
==1196== Use of uninitialised value of size 8
==1196==    at 0x400C02: print_hand (deck.c:19)
==1196==    by 0x4023A8: describe_hand (test-eval.c:74)
==1196==    by 0x402588: main (test-eval.c:116)
==1196== 
==1196== Conditional jump or move depends on uninitialised value(s)
==1196==    at 0x4027C8: value_letter (cards.c:49)
==1196==    by 0x40287F: print_card (cards.c:103)
==1196==    by 0x400C09: print_hand (deck.c:19)
==1196==    by 0x4023A8: describe_hand (test-eval.c:74)
==1196==    by 0x402588: main (test-eval.c:116)
==1196== 
==1196== Conditional jump or move depends on uninitialised value(s)
==1196==    at 0x4027D8: value_letter (cards.c:51)
==1196==    by 0x40287F: print_card (cards.c:103)
==1196==    by 0x400C09: print_hand (deck.c:19)
==1196==    by 0x4023A8: describe_hand (test-eval.c:74)
==1196==    by 0x402588: main (test-eval.c:116)
==1196== 
==1196== Conditional jump or move depends on uninitialised value(s)
==1196==    at 0x4027E7: value_letter (cards.c:54)
==1196==    by 0x40287F: print_card (cards.c:103)
==1196==    by 0x400C09: print_hand (deck.c:19)
==1196==    by 0x4023A8: describe_hand (test-eval.c:74)
==1196==    by 0x402588: main (test-eval.c:116)
==1196== 
==1196== Conditional jump or move depends on uninitialised value(s)
==1196==    at 0x4027EC: value_letter (cards.c:54)
==1196==    by 0x40287F: print_card (cards.c:103)
==1196==    by 0x400C09: print_hand (deck.c:19)
==1196==    by 0x4023A8: describe_hand (test-eval.c:74)
==1196==    by 0x402588: main (test-eval.c:116)
==1196== 
==1196== Conditional jump or move depends on uninitialised value(s)
==1196==    at 0x4027F8: value_letter (cards.c:54)
==1196==    by 0x40287F: print_card (cards.c:103)
==1196==    by 0x400C09: print_hand (deck.c:19)
==1196==    by 0x4023A8: describe_hand (test-eval.c:74)
==1196==    by 0x402588: main (test-eval.c:116)
==1196== 
==1196== Conditional jump or move depends on uninitialised value(s)
==1196==    at 0x4027FD: value_letter (cards.c:54)
==1196==    by 0x40287F: print_card (cards.c:103)
==1196==    by 0x400C09: print_hand (deck.c:19)
==1196==    by 0x4023A8: describe_hand (test-eval.c:74)
==1196==    by 0x402588: main (test-eval.c:116)
==1196== 
==1196== Conditional jump or move depends on uninitialised value(s)
==1196==    at 0x402832: suit_letter (cards.c:82)
==1196==    by 0x402891: print_card (cards.c:104)
==1196==    by 0x400C09: print_hand (deck.c:19)
==1196==    by 0x4023A8: describe_hand (test-eval.c:74)
==1196==    by 0x402588: main (test-eval.c:116)
==1196== 
==1196== Conditional jump or move depends on uninitialised value(s)
==1196==    at 0x402837: suit_letter (cards.c:82)
==1196==    by 0x402891: print_card (cards.c:104)
==1196==    by 0x400C09: print_hand (deck.c:19)
==1196==    by 0x4023A8: describe_hand (test-eval.c:74)
==1196==    by 0x402588: main (test-eval.c:116)
==1196== 
==1196== Invalid read of size 8
==1196==    at 0x400C02: print_hand (deck.c:19)
==1196==    by 0x4023A8: describe_hand (test-eval.c:74)
==1196==    by 0x402588: main (test-eval.c:116)
==1196==  Address 0x400001102 is not stack'd, malloc'd or (recently) free'd
==1196== 
==1196== 
==1196== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1196==  Access not within mapped region at address 0x400001102
==1196==    at 0x400C02: print_hand (deck.c:19)
==1196==    by 0x4023A8: describe_hand (test-eval.c:74)
==1196==    by 0x402588: main (test-eval.c:116)
==1196==  If you believe this happened as a result of a stack
==1196==  overflow in your program's main thread (unlikely but
==1196==  possible), you can try to increase the size of the
==1196==  main thread stack using the --main-stacksize= flag.
==1196==  The main thread stack size used in this run was 8388608.
==1196== 
==1196== HEAP SUMMARY:
==1196==     in use at exit: 864 bytes in 16 blocks
==1196==   total heap usage: 28 allocs, 12 frees, 9,256 bytes allocated
==1196== 
==1196== LEAK SUMMARY:
==1196==    definitely lost: 0 bytes in 0 blocks
==1196==    indirectly lost: 0 bytes in 0 blocks
==1196==      possibly lost: 0 bytes in 0 blocks
==1196==    still reachable: 864 bytes in 16 blocks
==1196==         suppressed: 0 bytes in 0 blocks
==1196== Rerun with --leak-check=full to see details of leaked memory
==1196== 
==1196== For counts of detected and suppressed errors, rerun with: -v
==1196== Use --track-origins=yes to see where uninitialised values come from
==1196== ERROR SUMMARY: 11 errors from 10 contexts (suppressed: 0 from 0)
Testcase 4: Trying hands with 3 of a kind
Valgrind returned an error status
==1201== Memcheck, a memory error detector
==1201== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1201== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1201== Command: ./test-eval inp.4.txt
==1201== Parent PID: 1200
==1201== 
==1201== Use of uninitialised value of size 8
==1201==    at 0x400C02: print_hand (deck.c:19)
==1201==    by 0x4023A8: describe_hand (test-eval.c:74)
==1201==    by 0x402588: main (test-eval.c:116)
==1201== 
==1201== Conditional jump or move depends on uninitialised value(s)
==1201==    at 0x4027C8: value_letter (cards.c:49)
==1201==    by 0x40287F: print_card (cards.c:103)
==1201==    by 0x400C09: print_hand (deck.c:19)
==1201==    by 0x4023A8: describe_hand (test-eval.c:74)
==1201==    by 0x402588: main (test-eval.c:116)
==1201== 
==1201== Conditional jump or move depends on uninitialised value(s)
==1201==    at 0x4027D8: value_letter (cards.c:51)
==1201==    by 0x40287F: print_card (cards.c:103)
==1201==    by 0x400C09: print_hand (deck.c:19)
==1201==    by 0x4023A8: describe_hand (test-eval.c:74)
==1201==    by 0x402588: main (test-eval.c:116)
==1201== 
==1201== Conditional jump or move depends on uninitialised value(s)
==1201==    at 0x4027E7: value_letter (cards.c:54)
==1201==    by 0x40287F: print_card (cards.c:103)
==1201==    by 0x400C09: print_hand (deck.c:19)
==1201==    by 0x4023A8: describe_hand (test-eval.c:74)
==1201==    by 0x402588: main (test-eval.c:116)
==1201== 
==1201== Conditional jump or move depends on uninitialised value(s)
==1201==    at 0x4027EC: value_letter (cards.c:54)
==1201==    by 0x40287F: print_card (cards.c:103)
==1201==    by 0x400C09: print_hand (deck.c:19)
==1201==    by 0x4023A8: describe_hand (test-eval.c:74)
==1201==    by 0x402588: main (test-eval.c:116)
==1201== 
==1201== Conditional jump or move depends on uninitialised value(s)
==1201==    at 0x4027F8: value_letter (cards.c:54)
==1201==    by 0x40287F: print_card (cards.c:103)
==1201==    by 0x400C09: print_hand (deck.c:19)
==1201==    by 0x4023A8: describe_hand (test-eval.c:74)
==1201==    by 0x402588: main (test-eval.c:116)
==1201== 
==1201== Conditional jump or move depends on uninitialised value(s)
==1201==    at 0x4027FD: value_letter (cards.c:54)
==1201==    by 0x40287F: print_card (cards.c:103)
==1201==    by 0x400C09: print_hand (deck.c:19)
==1201==    by 0x4023A8: describe_hand (test-eval.c:74)
==1201==    by 0x402588: main (test-eval.c:116)
==1201== 
==1201== Conditional jump or move depends on uninitialised value(s)
==1201==    at 0x402832: suit_letter (cards.c:82)
==1201==    by 0x402891: print_card (cards.c:104)
==1201==    by 0x400C09: print_hand (deck.c:19)
==1201==    by 0x4023A8: describe_hand (test-eval.c:74)
==1201==    by 0x402588: main (test-eval.c:116)
==1201== 
==1201== Conditional jump or move depends on uninitialised value(s)
==1201==    at 0x402837: suit_letter (cards.c:82)
==1201==    by 0x402891: print_card (cards.c:104)
==1201==    by 0x400C09: print_hand (deck.c:19)
==1201==    by 0x4023A8: describe_hand (test-eval.c:74)
==1201==    by 0x402588: main (test-eval.c:116)
==1201== 
==1201== Invalid read of size 8
==1201==    at 0x400C02: print_hand (deck.c:19)
==1201==    by 0x4023A8: describe_hand (test-eval.c:74)
==1201==    by 0x402588: main (test-eval.c:116)
==1201==  Address 0x400001102 is not stack'd, malloc'd or (recently) free'd
==1201== 
==1201== 
==1201== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1201==  Access not within mapped region at address 0x400001102
==1201==    at 0x400C02: print_hand (deck.c:19)
==1201==    by 0x4023A8: describe_hand (test-eval.c:74)
==1201==    by 0x402588: main (test-eval.c:116)
==1201==  If you believe this happened as a result of a stack
==1201==  overflow in your program's main thread (unlikely but
==1201==  possible), you can try to increase the size of the
==1201==  main thread stack using the --main-stacksize= flag.
==1201==  The main thread stack size used in this run was 8388608.
==1201== 
==1201== HEAP SUMMARY:
==1201==     in use at exit: 896 bytes in 18 blocks
==1201==   total heap usage: 32 allocs, 14 frees, 9,376 bytes allocated
==1201== 
==1201== LEAK SUMMARY:
==1201==    definitely lost: 0 bytes in 0 blocks
==1201==    indirectly lost: 0 bytes in 0 blocks
==1201==      possibly lost: 0 bytes in 0 blocks
==1201==    still reachable: 896 bytes in 18 blocks
==1201==         suppressed: 0 bytes in 0 blocks
==1201== Rerun with --leak-check=full to see details of leaked memory
==1201== 
==1201== For counts of detected and suppressed errors, rerun with: -v
==1201== Use --track-origins=yes to see where uninitialised values come from
==1201== ERROR SUMMARY: 11 errors from 10 contexts (suppressed: 0 from 0)
Testcase 5: Trying hands with straights
Valgrind returned an error status
==1206== Memcheck, a memory error detector
==1206== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1206== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1206== Command: ./test-eval inp.5.txt
==1206== Parent PID: 1205
==1206== 
==1206== Use of uninitialised value of size 8
==1206==    at 0x400C02: print_hand (deck.c:19)
==1206==    by 0x4023A8: describe_hand (test-eval.c:74)
==1206==    by 0x402588: main (test-eval.c:116)
==1206== 
==1206== Conditional jump or move depends on uninitialised value(s)
==1206==    at 0x4027C8: value_letter (cards.c:49)
==1206==    by 0x40287F: print_card (cards.c:103)
==1206==    by 0x400C09: print_hand (deck.c:19)
==1206==    by 0x4023A8: describe_hand (test-eval.c:74)
==1206==    by 0x402588: main (test-eval.c:116)
==1206== 
==1206== Conditional jump or move depends on uninitialised value(s)
==1206==    at 0x4027D8: value_letter (cards.c:51)
==1206==    by 0x40287F: print_card (cards.c:103)
==1206==    by 0x400C09: print_hand (deck.c:19)
==1206==    by 0x4023A8: describe_hand (test-eval.c:74)
==1206==    by 0x402588: main (test-eval.c:116)
==1206== 
==1206== Conditional jump or move depends on uninitialised value(s)
==1206==    at 0x4027E7: value_letter (cards.c:54)
==1206==    by 0x40287F: print_card (cards.c:103)
==1206==    by 0x400C09: print_hand (deck.c:19)
==1206==    by 0x4023A8: describe_hand (test-eval.c:74)
==1206==    by 0x402588: main (test-eval.c:116)
==1206== 
==1206== Conditional jump or move depends on uninitialised value(s)
==1206==    at 0x4027EC: value_letter (cards.c:54)
==1206==    by 0x40287F: print_card (cards.c:103)
==1206==    by 0x400C09: print_hand (deck.c:19)
==1206==    by 0x4023A8: describe_hand (test-eval.c:74)
==1206==    by 0x402588: main (test-eval.c:116)
==1206== 
==1206== Conditional jump or move depends on uninitialised value(s)
==1206==    at 0x4027F8: value_letter (cards.c:54)
==1206==    by 0x40287F: print_card (cards.c:103)
==1206==    by 0x400C09: print_hand (deck.c:19)
==1206==    by 0x4023A8: describe_hand (test-eval.c:74)
==1206==    by 0x402588: main (test-eval.c:116)
==1206== 
==1206== Conditional jump or move depends on uninitialised value(s)
==1206==    at 0x4027FD: value_letter (cards.c:54)
==1206==    by 0x40287F: print_card (cards.c:103)
==1206==    by 0x400C09: print_hand (deck.c:19)
==1206==    by 0x4023A8: describe_hand (test-eval.c:74)
==1206==    by 0x402588: main (test-eval.c:116)
==1206== 
==1206== Conditional jump or move depends on uninitialised value(s)
==1206==    at 0x402832: suit_letter (cards.c:82)
==1206==    by 0x402891: print_card (cards.c:104)
==1206==    by 0x400C09: print_hand (deck.c:19)
==1206==    by 0x4023A8: describe_hand (test-eval.c:74)
==1206==    by 0x402588: main (test-eval.c:116)
==1206== 
==1206== Conditional jump or move depends on uninitialised value(s)
==1206==    at 0x402837: suit_letter (cards.c:82)
==1206==    by 0x402891: print_card (cards.c:104)
==1206==    by 0x400C09: print_hand (deck.c:19)
==1206==    by 0x4023A8: describe_hand (test-eval.c:74)
==1206==    by 0x402588: main (test-eval.c:116)
==1206== 
==1206== Invalid read of size 8
==1206==    at 0x400C02: print_hand (deck.c:19)
==1206==    by 0x4023A8: describe_hand (test-eval.c:74)
==1206==    by 0x402588: main (test-eval.c:116)
==1206==  Address 0x400001102 is not stack'd, malloc'd or (recently) free'd
==1206== 
==1206== 
==1206== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1206==  Access not within mapped region at address 0x400001102
==1206==    at 0x400C02: print_hand (deck.c:19)
==1206==    by 0x4023A8: describe_hand (test-eval.c:74)
==1206==    by 0x402588: main (test-eval.c:116)
==1206==  If you believe this happened as a result of a stack
==1206==  overflow in your program's main thread (unlikely but
==1206==  possible), you can try to increase the size of the
==1206==  main thread stack using the --main-stacksize= flag.
==1206==  The main thread stack size used in this run was 8388608.
==1206== 
==1206== HEAP SUMMARY:
==1206==     in use at exit: 864 bytes in 16 blocks
==1206==   total heap usage: 28 allocs, 12 frees, 9,256 bytes allocated
==1206== 
==1206== LEAK SUMMARY:
==1206==    definitely lost: 0 bytes in 0 blocks
==1206==    indirectly lost: 0 bytes in 0 blocks
==1206==      possibly lost: 0 bytes in 0 blocks
==1206==    still reachable: 864 bytes in 16 blocks
==1206==         suppressed: 0 bytes in 0 blocks
==1206== Rerun with --leak-check=full to see details of leaked memory
==1206== 
==1206== For counts of detected and suppressed errors, rerun with: -v
==1206== Use --track-origins=yes to see where uninitialised values come from
==1206== ERROR SUMMARY: 11 errors from 10 contexts (suppressed: 0 from 0)
Testcase 6: Trying hands with flushes
Valgrind returned an error status
==1211== Memcheck, a memory error detector
==1211== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1211== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1211== Command: ./test-eval inp.6.txt
==1211== Parent PID: 1210
==1211== 
==1211== Use of uninitialised value of size 8
==1211==    at 0x400C02: print_hand (deck.c:19)
==1211==    by 0x4023A8: describe_hand (test-eval.c:74)
==1211==    by 0x402588: main (test-eval.c:116)
==1211== 
==1211== Conditional jump or move depends on uninitialised value(s)
==1211==    at 0x4027C8: value_letter (cards.c:49)
==1211==    by 0x40287F: print_card (cards.c:103)
==1211==    by 0x400C09: print_hand (deck.c:19)
==1211==    by 0x4023A8: describe_hand (test-eval.c:74)
==1211==    by 0x402588: main (test-eval.c:116)
==1211== 
==1211== Conditional jump or move depends on uninitialised value(s)
==1211==    at 0x4027D8: value_letter (cards.c:51)
==1211==    by 0x40287F: print_card (cards.c:103)
==1211==    by 0x400C09: print_hand (deck.c:19)
==1211==    by 0x4023A8: describe_hand (test-eval.c:74)
==1211==    by 0x402588: main (test-eval.c:116)
==1211== 
==1211== Conditional jump or move depends on uninitialised value(s)
==1211==    at 0x4027E7: value_letter (cards.c:54)
==1211==    by 0x40287F: print_card (cards.c:103)
==1211==    by 0x400C09: print_hand (deck.c:19)
==1211==    by 0x4023A8: describe_hand (test-eval.c:74)
==1211==    by 0x402588: main (test-eval.c:116)
==1211== 
==1211== Conditional jump or move depends on uninitialised value(s)
==1211==    at 0x4027EC: value_letter (cards.c:54)
==1211==    by 0x40287F: print_card (cards.c:103)
==1211==    by 0x400C09: print_hand (deck.c:19)
==1211==    by 0x4023A8: describe_hand (test-eval.c:74)
==1211==    by 0x402588: main (test-eval.c:116)
==1211== 
==1211== Conditional jump or move depends on uninitialised value(s)
==1211==    at 0x4027F8: value_letter (cards.c:54)
==1211==    by 0x40287F: print_card (cards.c:103)
==1211==    by 0x400C09: print_hand (deck.c:19)
==1211==    by 0x4023A8: describe_hand (test-eval.c:74)
==1211==    by 0x402588: main (test-eval.c:116)
==1211== 
==1211== Conditional jump or move depends on uninitialised value(s)
==1211==    at 0x4027FD: value_letter (cards.c:54)
==1211==    by 0x40287F: print_card (cards.c:103)
==1211==    by 0x400C09: print_hand (deck.c:19)
==1211==    by 0x4023A8: describe_hand (test-eval.c:74)
==1211==    by 0x402588: main (test-eval.c:116)
==1211== 
==1211== Conditional jump or move depends on uninitialised value(s)
==1211==    at 0x402832: suit_letter (cards.c:82)
==1211==    by 0x402891: print_card (cards.c:104)
==1211==    by 0x400C09: print_hand (deck.c:19)
==1211==    by 0x4023A8: describe_hand (test-eval.c:74)
==1211==    by 0x402588: main (test-eval.c:116)
==1211== 
==1211== Conditional jump or move depends on uninitialised value(s)
==1211==    at 0x402837: suit_letter (cards.c:82)
==1211==    by 0x402891: print_card (cards.c:104)
==1211==    by 0x400C09: print_hand (deck.c:19)
==1211==    by 0x4023A8: describe_hand (test-eval.c:74)
==1211==    by 0x402588: main (test-eval.c:116)
==1211== 
==1211== Invalid read of size 8
==1211==    at 0x400C02: print_hand (deck.c:19)
==1211==    by 0x4023A8: describe_hand (test-eval.c:74)
==1211==    by 0x402588: main (test-eval.c:116)
==1211==  Address 0x400001102 is not stack'd, malloc'd or (recently) free'd
==1211== 
==1211== 
==1211== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1211==  Access not within mapped region at address 0x400001102
==1211==    at 0x400C02: print_hand (deck.c:19)
==1211==    by 0x4023A8: describe_hand (test-eval.c:74)
==1211==    by 0x402588: main (test-eval.c:116)
==1211==  If you believe this happened as a result of a stack
==1211==  overflow in your program's main thread (unlikely but
==1211==  possible), you can try to increase the size of the
==1211==  main thread stack using the --main-stacksize= flag.
==1211==  The main thread stack size used in this run was 8388608.
==1211== 
==1211== HEAP SUMMARY:
==1211==     in use at exit: 896 bytes in 18 blocks
==1211==   total heap usage: 32 allocs, 14 frees, 9,376 bytes allocated
==1211== 
==1211== LEAK SUMMARY:
==1211==    definitely lost: 0 bytes in 0 blocks
==1211==    indirectly lost: 0 bytes in 0 blocks
==1211==      possibly lost: 0 bytes in 0 blocks
==1211==    still reachable: 896 bytes in 18 blocks
==1211==         suppressed: 0 bytes in 0 blocks
==1211== Rerun with --leak-check=full to see details of leaked memory
==1211== 
==1211== For counts of detected and suppressed errors, rerun with: -v
==1211== Use --track-origins=yes to see where uninitialised values come from
==1211== ERROR SUMMARY: 11 errors from 10 contexts (suppressed: 0 from 0)
Testcase 7: Trying hands with full houses
Valgrind returned an error status
==1216== Memcheck, a memory error detector
==1216== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1216== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1216== Command: ./test-eval inp.7.txt
==1216== Parent PID: 1215
==1216== 
==1216== Use of uninitialised value of size 8
==1216==    at 0x400C02: print_hand (deck.c:19)
==1216==    by 0x4023A8: describe_hand (test-eval.c:74)
==1216==    by 0x402588: main (test-eval.c:116)
==1216== 
==1216== Conditional jump or move depends on uninitialised value(s)
==1216==    at 0x4027C8: value_letter (cards.c:49)
==1216==    by 0x40287F: print_card (cards.c:103)
==1216==    by 0x400C09: print_hand (deck.c:19)
==1216==    by 0x4023A8: describe_hand (test-eval.c:74)
==1216==    by 0x402588: main (test-eval.c:116)
==1216== 
==1216== Conditional jump or move depends on uninitialised value(s)
==1216==    at 0x4027D8: value_letter (cards.c:51)
==1216==    by 0x40287F: print_card (cards.c:103)
==1216==    by 0x400C09: print_hand (deck.c:19)
==1216==    by 0x4023A8: describe_hand (test-eval.c:74)
==1216==    by 0x402588: main (test-eval.c:116)
==1216== 
==1216== Conditional jump or move depends on uninitialised value(s)
==1216==    at 0x4027E7: value_letter (cards.c:54)
==1216==    by 0x40287F: print_card (cards.c:103)
==1216==    by 0x400C09: print_hand (deck.c:19)
==1216==    by 0x4023A8: describe_hand (test-eval.c:74)
==1216==    by 0x402588: main (test-eval.c:116)
==1216== 
==1216== Conditional jump or move depends on uninitialised value(s)
==1216==    at 0x4027EC: value_letter (cards.c:54)
==1216==    by 0x40287F: print_card (cards.c:103)
==1216==    by 0x400C09: print_hand (deck.c:19)
==1216==    by 0x4023A8: describe_hand (test-eval.c:74)
==1216==    by 0x402588: main (test-eval.c:116)
==1216== 
==1216== Conditional jump or move depends on uninitialised value(s)
==1216==    at 0x4027F8: value_letter (cards.c:54)
==1216==    by 0x40287F: print_card (cards.c:103)
==1216==    by 0x400C09: print_hand (deck.c:19)
==1216==    by 0x4023A8: describe_hand (test-eval.c:74)
==1216==    by 0x402588: main (test-eval.c:116)
==1216== 
==1216== Conditional jump or move depends on uninitialised value(s)
==1216==    at 0x4027FD: value_letter (cards.c:54)
==1216==    by 0x40287F: print_card (cards.c:103)
==1216==    by 0x400C09: print_hand (deck.c:19)
==1216==    by 0x4023A8: describe_hand (test-eval.c:74)
==1216==    by 0x402588: main (test-eval.c:116)
==1216== 
==1216== Conditional jump or move depends on uninitialised value(s)
==1216==    at 0x402832: suit_letter (cards.c:82)
==1216==    by 0x402891: print_card (cards.c:104)
==1216==    by 0x400C09: print_hand (deck.c:19)
==1216==    by 0x4023A8: describe_hand (test-eval.c:74)
==1216==    by 0x402588: main (test-eval.c:116)
==1216== 
==1216== Conditional jump or move depends on uninitialised value(s)
==1216==    at 0x402837: suit_letter (cards.c:82)
==1216==    by 0x402891: print_card (cards.c:104)
==1216==    by 0x400C09: print_hand (deck.c:19)
==1216==    by 0x4023A8: describe_hand (test-eval.c:74)
==1216==    by 0x402588: main (test-eval.c:116)
==1216== 
==1216== Invalid read of size 8
==1216==    at 0x400C02: print_hand (deck.c:19)
==1216==    by 0x4023A8: describe_hand (test-eval.c:74)
==1216==    by 0x402588: main (test-eval.c:116)
==1216==  Address 0x400001102 is not stack'd, malloc'd or (recently) free'd
==1216== 
==1216== 
==1216== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1216==  Access not within mapped region at address 0x400001102
==1216==    at 0x400C02: print_hand (deck.c:19)
==1216==    by 0x4023A8: describe_hand (test-eval.c:74)
==1216==    by 0x402588: main (test-eval.c:116)
==1216==  If you believe this happened as a result of a stack
==1216==  overflow in your program's main thread (unlikely but
==1216==  possible), you can try to increase the size of the
==1216==  main thread stack using the --main-stacksize= flag.
==1216==  The main thread stack size used in this run was 8388608.
==1216== 
==1216== HEAP SUMMARY:
==1216==     in use at exit: 928 bytes in 20 blocks
==1216==   total heap usage: 36 allocs, 16 frees, 9,512 bytes allocated
==1216== 
==1216== LEAK SUMMARY:
==1216==    definitely lost: 0 bytes in 0 blocks
==1216==    indirectly lost: 0 bytes in 0 blocks
==1216==      possibly lost: 0 bytes in 0 blocks
==1216==    still reachable: 928 bytes in 20 blocks
==1216==         suppressed: 0 bytes in 0 blocks
==1216== Rerun with --leak-check=full to see details of leaked memory
==1216== 
==1216== For counts of detected and suppressed errors, rerun with: -v
==1216== Use --track-origins=yes to see where uninitialised values come from
==1216== ERROR SUMMARY: 11 errors from 10 contexts (suppressed: 0 from 0)
Testcase 8: Trying hands with 4 of a kind
Valgrind returned an error status
==1221== Memcheck, a memory error detector
==1221== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1221== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1221== Command: ./test-eval inp.8.txt
==1221== Parent PID: 1220
==1221== 
==1221== Use of uninitialised value of size 8
==1221==    at 0x400C02: print_hand (deck.c:19)
==1221==    by 0x4023A8: describe_hand (test-eval.c:74)
==1221==    by 0x402588: main (test-eval.c:116)
==1221== 
==1221== Conditional jump or move depends on uninitialised value(s)
==1221==    at 0x4027C8: value_letter (cards.c:49)
==1221==    by 0x40287F: print_card (cards.c:103)
==1221==    by 0x400C09: print_hand (deck.c:19)
==1221==    by 0x4023A8: describe_hand (test-eval.c:74)
==1221==    by 0x402588: main (test-eval.c:116)
==1221== 
==1221== Conditional jump or move depends on uninitialised value(s)
==1221==    at 0x4027D8: value_letter (cards.c:51)
==1221==    by 0x40287F: print_card (cards.c:103)
==1221==    by 0x400C09: print_hand (deck.c:19)
==1221==    by 0x4023A8: describe_hand (test-eval.c:74)
==1221==    by 0x402588: main (test-eval.c:116)
==1221== 
==1221== Conditional jump or move depends on uninitialised value(s)
==1221==    at 0x4027E7: value_letter (cards.c:54)
==1221==    by 0x40287F: print_card (cards.c:103)
==1221==    by 0x400C09: print_hand (deck.c:19)
==1221==    by 0x4023A8: describe_hand (test-eval.c:74)
==1221==    by 0x402588: main (test-eval.c:116)
==1221== 
==1221== Conditional jump or move depends on uninitialised value(s)
==1221==    at 0x4027EC: value_letter (cards.c:54)
==1221==    by 0x40287F: print_card (cards.c:103)
==1221==    by 0x400C09: print_hand (deck.c:19)
==1221==    by 0x4023A8: describe_hand (test-eval.c:74)
==1221==    by 0x402588: main (test-eval.c:116)
==1221== 
==1221== Conditional jump or move depends on uninitialised value(s)
==1221==    at 0x4027F8: value_letter (cards.c:54)
==1221==    by 0x40287F: print_card (cards.c:103)
==1221==    by 0x400C09: print_hand (deck.c:19)
==1221==    by 0x4023A8: describe_hand (test-eval.c:74)
==1221==    by 0x402588: main (test-eval.c:116)
==1221== 
==1221== Conditional jump or move depends on uninitialised value(s)
==1221==    at 0x4027FD: value_letter (cards.c:54)
==1221==    by 0x40287F: print_card (cards.c:103)
==1221==    by 0x400C09: print_hand (deck.c:19)
==1221==    by 0x4023A8: describe_hand (test-eval.c:74)
==1221==    by 0x402588: main (test-eval.c:116)
==1221== 
==1221== Conditional jump or move depends on uninitialised value(s)
==1221==    at 0x402832: suit_letter (cards.c:82)
==1221==    by 0x402891: print_card (cards.c:104)
==1221==    by 0x400C09: print_hand (deck.c:19)
==1221==    by 0x4023A8: describe_hand (test-eval.c:74)
==1221==    by 0x402588: main (test-eval.c:116)
==1221== 
==1221== Conditional jump or move depends on uninitialised value(s)
==1221==    at 0x402837: suit_letter (cards.c:82)
==1221==    by 0x402891: print_card (cards.c:104)
==1221==    by 0x400C09: print_hand (deck.c:19)
==1221==    by 0x4023A8: describe_hand (test-eval.c:74)
==1221==    by 0x402588: main (test-eval.c:116)
==1221== 
==1221== Invalid read of size 8
==1221==    at 0x400C02: print_hand (deck.c:19)
==1221==    by 0x4023A8: describe_hand (test-eval.c:74)
==1221==    by 0x402588: main (test-eval.c:116)
==1221==  Address 0x400001102 is not stack'd, malloc'd or (recently) free'd
==1221== 
==1221== 
==1221== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1221==  Access not within mapped region at address 0x400001102
==1221==    at 0x400C02: print_hand (deck.c:19)
==1221==    by 0x4023A8: describe_hand (test-eval.c:74)
==1221==    by 0x402588: main (test-eval.c:116)
==1221==  If you believe this happened as a result of a stack
==1221==  overflow in your program's main thread (unlikely but
==1221==  possible), you can try to increase the size of the
==1221==  main thread stack using the --main-stacksize= flag.
==1221==  The main thread stack size used in this run was 8388608.
==1221== 
==1221== HEAP SUMMARY:
==1221==     in use at exit: 896 bytes in 18 blocks
==1221==   total heap usage: 32 allocs, 14 frees, 9,376 bytes allocated
==1221== 
==1221== LEAK SUMMARY:
==1221==    definitely lost: 0 bytes in 0 blocks
==1221==    indirectly lost: 0 bytes in 0 blocks
==1221==      possibly lost: 0 bytes in 0 blocks
==1221==    still reachable: 896 bytes in 18 blocks
==1221==         suppressed: 0 bytes in 0 blocks
==1221== Rerun with --leak-check=full to see details of leaked memory
==1221== 
==1221== For counts of detected and suppressed errors, rerun with: -v
==1221== Use --track-origins=yes to see where uninitialised values come from
==1221== ERROR SUMMARY: 11 errors from 10 contexts (suppressed: 0 from 0)
Testcase 9: Trying hands with straight flushes
Valgrind returned an error status
==1226== Memcheck, a memory error detector
==1226== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1226== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1226== Command: ./test-eval inp.9.txt
==1226== Parent PID: 1225
==1226== 
==1226== Use of uninitialised value of size 8
==1226==    at 0x400C02: print_hand (deck.c:19)
==1226==    by 0x4023A8: describe_hand (test-eval.c:74)
==1226==    by 0x402588: main (test-eval.c:116)
==1226== 
==1226== Conditional jump or move depends on uninitialised value(s)
==1226==    at 0x4027C8: value_letter (cards.c:49)
==1226==    by 0x40287F: print_card (cards.c:103)
==1226==    by 0x400C09: print_hand (deck.c:19)
==1226==    by 0x4023A8: describe_hand (test-eval.c:74)
==1226==    by 0x402588: main (test-eval.c:116)
==1226== 
==1226== Conditional jump or move depends on uninitialised value(s)
==1226==    at 0x4027D8: value_letter (cards.c:51)
==1226==    by 0x40287F: print_card (cards.c:103)
==1226==    by 0x400C09: print_hand (deck.c:19)
==1226==    by 0x4023A8: describe_hand (test-eval.c:74)
==1226==    by 0x402588: main (test-eval.c:116)
==1226== 
==1226== Conditional jump or move depends on uninitialised value(s)
==1226==    at 0x4027E7: value_letter (cards.c:54)
==1226==    by 0x40287F: print_card (cards.c:103)
==1226==    by 0x400C09: print_hand (deck.c:19)
==1226==    by 0x4023A8: describe_hand (test-eval.c:74)
==1226==    by 0x402588: main (test-eval.c:116)
==1226== 
==1226== Conditional jump or move depends on uninitialised value(s)
==1226==    at 0x4027EC: value_letter (cards.c:54)
==1226==    by 0x40287F: print_card (cards.c:103)
==1226==    by 0x400C09: print_hand (deck.c:19)
==1226==    by 0x4023A8: describe_hand (test-eval.c:74)
==1226==    by 0x402588: main (test-eval.c:116)
==1226== 
==1226== Conditional jump or move depends on uninitialised value(s)
==1226==    at 0x4027F8: value_letter (cards.c:54)
==1226==    by 0x40287F: print_card (cards.c:103)
==1226==    by 0x400C09: print_hand (deck.c:19)
==1226==    by 0x4023A8: describe_hand (test-eval.c:74)
==1226==    by 0x402588: main (test-eval.c:116)
==1226== 
==1226== Conditional jump or move depends on uninitialised value(s)
==1226==    at 0x4027FD: value_letter (cards.c:54)
==1226==    by 0x40287F: print_card (cards.c:103)
==1226==    by 0x400C09: print_hand (deck.c:19)
==1226==    by 0x4023A8: describe_hand (test-eval.c:74)
==1226==    by 0x402588: main (test-eval.c:116)
==1226== 
==1226== Conditional jump or move depends on uninitialised value(s)
==1226==    at 0x402832: suit_letter (cards.c:82)
==1226==    by 0x402891: print_card (cards.c:104)
==1226==    by 0x400C09: print_hand (deck.c:19)
==1226==    by 0x4023A8: describe_hand (test-eval.c:74)
==1226==    by 0x402588: main (test-eval.c:116)
==1226== 
==1226== Conditional jump or move depends on uninitialised value(s)
==1226==    at 0x402837: suit_letter (cards.c:82)
==1226==    by 0x402891: print_card (cards.c:104)
==1226==    by 0x400C09: print_hand (deck.c:19)
==1226==    by 0x4023A8: describe_hand (test-eval.c:74)
==1226==    by 0x402588: main (test-eval.c:116)
==1226== 
==1226== Invalid read of size 8
==1226==    at 0x400C02: print_hand (deck.c:19)
==1226==    by 0x4023A8: describe_hand (test-eval.c:74)
==1226==    by 0x402588: main (test-eval.c:116)
==1226==  Address 0x400001102 is not stack'd, malloc'd or (recently) free'd
==1226== 
==1226== 
==1226== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1226==  Access not within mapped region at address 0x400001102
==1226==    at 0x400C02: print_hand (deck.c:19)
==1226==    by 0x4023A8: describe_hand (test-eval.c:74)
==1226==    by 0x402588: main (test-eval.c:116)
==1226==  If you believe this happened as a result of a stack
==1226==  overflow in your program's main thread (unlikely but
==1226==  possible), you can try to increase the size of the
==1226==  main thread stack using the --main-stacksize= flag.
==1226==  The main thread stack size used in this run was 8388608.
==1226== 
==1226== HEAP SUMMARY:
==1226==     in use at exit: 864 bytes in 16 blocks
==1226==   total heap usage: 28 allocs, 12 frees, 9,256 bytes allocated
==1226== 
==1226== LEAK SUMMARY:
==1226==    definitely lost: 0 bytes in 0 blocks
==1226==    indirectly lost: 0 bytes in 0 blocks
==1226==      possibly lost: 0 bytes in 0 blocks
==1226==    still reachable: 864 bytes in 16 blocks
==1226==         suppressed: 0 bytes in 0 blocks
==1226== Rerun with --leak-check=full to see details of leaked memory
==1226== 
==1226== For counts of detected and suppressed errors, rerun with: -v
==1226== Use --track-origins=yes to see where uninitialised values come from
==1226== ERROR SUMMARY: 11 errors from 10 contexts (suppressed: 0 from 0)
Testcase 10: Trying each type of hand ranking
Valgrind returned an error status
==1231== Memcheck, a memory error detector
==1231== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1231== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1231== Command: ./test-eval inp.10.txt
==1231== Parent PID: 1230
==1231== 
==1231== Use of uninitialised value of size 8
==1231==    at 0x400C02: print_hand (deck.c:19)
==1231==    by 0x4023A8: describe_hand (test-eval.c:74)
==1231==    by 0x402588: main (test-eval.c:116)
==1231== 
==1231== Conditional jump or move depends on uninitialised value(s)
==1231==    at 0x4027C8: value_letter (cards.c:49)
==1231==    by 0x40287F: print_card (cards.c:103)
==1231==    by 0x400C09: print_hand (deck.c:19)
==1231==    by 0x4023A8: describe_hand (test-eval.c:74)
==1231==    by 0x402588: main (test-eval.c:116)
==1231== 
==1231== Conditional jump or move depends on uninitialised value(s)
==1231==    at 0x4027D8: value_letter (cards.c:51)
==1231==    by 0x40287F: print_card (cards.c:103)
==1231==    by 0x400C09: print_hand (deck.c:19)
==1231==    by 0x4023A8: describe_hand (test-eval.c:74)
==1231==    by 0x402588: main (test-eval.c:116)
==1231== 
==1231== Conditional jump or move depends on uninitialised value(s)
==1231==    at 0x4027E7: value_letter (cards.c:54)
==1231==    by 0x40287F: print_card (cards.c:103)
==1231==    by 0x400C09: print_hand (deck.c:19)
==1231==    by 0x4023A8: describe_hand (test-eval.c:74)
==1231==    by 0x402588: main (test-eval.c:116)
==1231== 
==1231== Conditional jump or move depends on uninitialised value(s)
==1231==    at 0x4027EC: value_letter (cards.c:54)
==1231==    by 0x40287F: print_card (cards.c:103)
==1231==    by 0x400C09: print_hand (deck.c:19)
==1231==    by 0x4023A8: describe_hand (test-eval.c:74)
==1231==    by 0x402588: main (test-eval.c:116)
==1231== 
==1231== Conditional jump or move depends on uninitialised value(s)
==1231==    at 0x4027F8: value_letter (cards.c:54)
==1231==    by 0x40287F: print_card (cards.c:103)
==1231==    by 0x400C09: print_hand (deck.c:19)
==1231==    by 0x4023A8: describe_hand (test-eval.c:74)
==1231==    by 0x402588: main (test-eval.c:116)
==1231== 
==1231== Conditional jump or move depends on uninitialised value(s)
==1231==    at 0x4027FD: value_letter (cards.c:54)
==1231==    by 0x40287F: print_card (cards.c:103)
==1231==    by 0x400C09: print_hand (deck.c:19)
==1231==    by 0x4023A8: describe_hand (test-eval.c:74)
==1231==    by 0x402588: main (test-eval.c:116)
==1231== 
==1231== Conditional jump or move depends on uninitialised value(s)
==1231==    at 0x402832: suit_letter (cards.c:82)
==1231==    by 0x402891: print_card (cards.c:104)
==1231==    by 0x400C09: print_hand (deck.c:19)
==1231==    by 0x4023A8: describe_hand (test-eval.c:74)
==1231==    by 0x402588: main (test-eval.c:116)
==1231== 
==1231== Conditional jump or move depends on uninitialised value(s)
==1231==    at 0x402837: suit_letter (cards.c:82)
==1231==    by 0x402891: print_card (cards.c:104)
==1231==    by 0x400C09: print_hand (deck.c:19)
==1231==    by 0x4023A8: describe_hand (test-eval.c:74)
==1231==    by 0x402588: main (test-eval.c:116)
==1231== 
==1231== Invalid read of size 8
==1231==    at 0x400C02: print_hand (deck.c:19)
==1231==    by 0x4023A8: describe_hand (test-eval.c:74)
==1231==    by 0x402588: main (test-eval.c:116)
==1231==  Address 0x400001102 is not stack'd, malloc'd or (recently) free'd
==1231== 
==1231== 
==1231== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1231==  Access not within mapped region at address 0x400001102
==1231==    at 0x400C02: print_hand (deck.c:19)
==1231==    by 0x4023A8: describe_hand (test-eval.c:74)
==1231==    by 0x402588: main (test-eval.c:116)
==1231==  If you believe this happened as a result of a stack
==1231==  overflow in your program's main thread (unlikely but
==1231==  possible), you can try to increase the size of the
==1231==  main thread stack using the --main-stacksize= flag.
==1231==  The main thread stack size used in this run was 8388608.
==1231== 
==1231== HEAP SUMMARY:
==1231==     in use at exit: 896 bytes in 18 blocks
==1231==   total heap usage: 32 allocs, 14 frees, 9,376 bytes allocated
==1231== 
==1231== LEAK SUMMARY:
==1231==    definitely lost: 0 bytes in 0 blocks
==1231==    indirectly lost: 0 bytes in 0 blocks
==1231==      possibly lost: 0 bytes in 0 blocks
==1231==    still reachable: 896 bytes in 18 blocks
==1231==         suppressed: 0 bytes in 0 blocks
==1231== Rerun with --leak-check=full to see details of leaked memory
==1231== 
==1231== For counts of detected and suppressed errors, rerun with: -v
==1231== Use --track-origins=yes to see where uninitialised values come from
==1231== ERROR SUMMARY: 11 errors from 10 contexts (suppressed: 0 from 0)

Overall Grade: F
