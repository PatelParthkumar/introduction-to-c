Grading at Mon Dec 30 22:14:01 UTC 2019
Compiling your code
rm -f test poker cards.o my-test-main.o *~
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o deck.o deck.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o eval.o eval.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o cards.o cards.c
gcc -o test-eval -ggdb3 deck.o deck-c4.o eval-c4.o eval.o test-eval.o cards.o input.o future.o
Testcase 1: Trying hands with nothing
Valgrind returned an error status
==429== Memcheck, a memory error detector
==429== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==429== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==429== Command: ./test-eval inp.1.txt
==429== Parent PID: 428
==429== 
==429== Use of uninitialised value of size 8
==429==    at 0x400C02: print_hand (deck.c:19)
==429==    by 0x4028AF: describe_hand (test-eval.c:74)
==429==    by 0x402A8F: main (test-eval.c:116)
==429== 
==429== Invalid read of size 8
==429==    at 0x400C02: print_hand (deck.c:19)
==429==    by 0x4028AF: describe_hand (test-eval.c:74)
==429==    by 0x402A8F: main (test-eval.c:116)
==429==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==429== 
==429== 
==429== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==429==  Access not within mapped region at address 0x0
==429==    at 0x400C02: print_hand (deck.c:19)
==429==    by 0x4028AF: describe_hand (test-eval.c:74)
==429==    by 0x402A8F: main (test-eval.c:116)
==429==  If you believe this happened as a result of a stack
==429==  overflow in your program's main thread (unlikely but
==429==  possible), you can try to increase the size of the
==429==  main thread stack using the --main-stacksize= flag.
==429==  The main thread stack size used in this run was 8388608.
==429== 
==429== HEAP SUMMARY:
==429==     in use at exit: 864 bytes in 16 blocks
==429==   total heap usage: 202 allocs, 186 frees, 12,472 bytes allocated
==429== 
==429== LEAK SUMMARY:
==429==    definitely lost: 0 bytes in 0 blocks
==429==    indirectly lost: 0 bytes in 0 blocks
==429==      possibly lost: 0 bytes in 0 blocks
==429==    still reachable: 864 bytes in 16 blocks
==429==         suppressed: 0 bytes in 0 blocks
==429== Rerun with --leak-check=full to see details of leaked memory
==429== 
==429== For counts of detected and suppressed errors, rerun with: -v
==429== Use --track-origins=yes to see where uninitialised values come from
==429== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 2: Trying hands with pairs
Valgrind returned an error status
==434== Memcheck, a memory error detector
==434== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==434== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==434== Command: ./test-eval inp.2.txt
==434== Parent PID: 433
==434== 
==434== Use of uninitialised value of size 8
==434==    at 0x400C02: print_hand (deck.c:19)
==434==    by 0x4028AF: describe_hand (test-eval.c:74)
==434==    by 0x402AAF: main (test-eval.c:119)
==434== 
==434== Invalid read of size 8
==434==    at 0x400C02: print_hand (deck.c:19)
==434==    by 0x4028AF: describe_hand (test-eval.c:74)
==434==    by 0x402AAF: main (test-eval.c:119)
==434==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==434== 
==434== 
==434== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==434==  Access not within mapped region at address 0x0
==434==    at 0x400C02: print_hand (deck.c:19)
==434==    by 0x4028AF: describe_hand (test-eval.c:74)
==434==    by 0x402AAF: main (test-eval.c:119)
==434==  If you believe this happened as a result of a stack
==434==  overflow in your program's main thread (unlikely but
==434==  possible), you can try to increase the size of the
==434==  main thread stack using the --main-stacksize= flag.
==434==  The main thread stack size used in this run was 8388608.
==434== 
==434== HEAP SUMMARY:
==434==     in use at exit: 880 bytes in 17 blocks
==434==   total heap usage: 32 allocs, 15 frees, 9,360 bytes allocated
==434== 
==434== LEAK SUMMARY:
==434==    definitely lost: 0 bytes in 0 blocks
==434==    indirectly lost: 0 bytes in 0 blocks
==434==      possibly lost: 0 bytes in 0 blocks
==434==    still reachable: 880 bytes in 17 blocks
==434==         suppressed: 0 bytes in 0 blocks
==434== Rerun with --leak-check=full to see details of leaked memory
==434== 
==434== For counts of detected and suppressed errors, rerun with: -v
==434== Use --track-origins=yes to see where uninitialised values come from
==434== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 3: Trying hands with 2 pairs
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 4: Trying hands with 3 of a kind
Valgrind returned an error status
==451== Memcheck, a memory error detector
==451== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==451== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==451== Command: ./test-eval inp.4.txt
==451== Parent PID: 450
==451== 
==451== Use of uninitialised value of size 8
==451==    at 0x400C02: print_hand (deck.c:19)
==451==    by 0x4028AF: describe_hand (test-eval.c:74)
==451==    by 0x402A8F: main (test-eval.c:116)
==451== 
==451== Invalid read of size 8
==451==    at 0x400C02: print_hand (deck.c:19)
==451==    by 0x4028AF: describe_hand (test-eval.c:74)
==451==    by 0x402A8F: main (test-eval.c:116)
==451==  Address 0x520bd30 is 0 bytes inside a block of size 24 free'd
==451==    at 0x4C2EDEB: free (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==451==    by 0x4020A9: evaluate_hand (eval.c:517)
==451==    by 0x402864: describe_hand (test-eval.c:68)
==451==    by 0x402A8F: main (test-eval.c:116)
==451==  Block was alloc'd at
==451==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==451==    by 0x4013DE: get_match_counts (eval-c4.c:70)
==451==    by 0x402027: evaluate_hand (eval.c:512)
==451==    by 0x402864: describe_hand (test-eval.c:68)
==451==    by 0x402A8F: main (test-eval.c:116)
==451== 
==451== 
==451== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==451==  Access not within mapped region at address 0x0
==451==    at 0x400C02: print_hand (deck.c:19)
==451==    by 0x4028AF: describe_hand (test-eval.c:74)
==451==    by 0x402A8F: main (test-eval.c:116)
==451==  If you believe this happened as a result of a stack
==451==  overflow in your program's main thread (unlikely but
==451==  possible), you can try to increase the size of the
==451==  main thread stack using the --main-stacksize= flag.
==451==  The main thread stack size used in this run was 8388608.
==451== 
==451== HEAP SUMMARY:
==451==     in use at exit: 896 bytes in 18 blocks
==451==   total heap usage: 264 allocs, 246 frees, 13,664 bytes allocated
==451== 
==451== LEAK SUMMARY:
==451==    definitely lost: 0 bytes in 0 blocks
==451==    indirectly lost: 0 bytes in 0 blocks
==451==      possibly lost: 0 bytes in 0 blocks
==451==    still reachable: 896 bytes in 18 blocks
==451==         suppressed: 0 bytes in 0 blocks
==451== Rerun with --leak-check=full to see details of leaked memory
==451== 
==451== For counts of detected and suppressed errors, rerun with: -v
==451== Use --track-origins=yes to see where uninitialised values come from
==451== ERROR SUMMARY: 4 errors from 2 contexts (suppressed: 0 from 0)
Testcase 5: Trying hands with straights
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 6: Trying hands with flushes
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 7: Trying hands with full houses
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 8: Trying hands with 4 of a kind
Valgrind returned an error status
==492== Memcheck, a memory error detector
==492== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==492== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==492== Command: ./test-eval inp.8.txt
==492== Parent PID: 491
==492== 
==492== Use of uninitialised value of size 8
==492==    at 0x400C02: print_hand (deck.c:19)
==492==    by 0x4028AF: describe_hand (test-eval.c:74)
==492==    by 0x402AAF: main (test-eval.c:119)
==492== 
==492== Invalid read of size 8
==492==    at 0x400C02: print_hand (deck.c:19)
==492==    by 0x4028AF: describe_hand (test-eval.c:74)
==492==    by 0x402AAF: main (test-eval.c:119)
==492==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==492== 
==492== 
==492== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==492==  Access not within mapped region at address 0x0
==492==    at 0x400C02: print_hand (deck.c:19)
==492==    by 0x4028AF: describe_hand (test-eval.c:74)
==492==    by 0x402AAF: main (test-eval.c:119)
==492==  If you believe this happened as a result of a stack
==492==  overflow in your program's main thread (unlikely but
==492==  possible), you can try to increase the size of the
==492==  main thread stack using the --main-stacksize= flag.
==492==  The main thread stack size used in this run was 8388608.
==492== 
==492== HEAP SUMMARY:
==492==     in use at exit: 896 bytes in 18 blocks
==492==   total heap usage: 150 allocs, 132 frees, 11,568 bytes allocated
==492== 
==492== LEAK SUMMARY:
==492==    definitely lost: 0 bytes in 0 blocks
==492==    indirectly lost: 0 bytes in 0 blocks
==492==      possibly lost: 0 bytes in 0 blocks
==492==    still reachable: 896 bytes in 18 blocks
==492==         suppressed: 0 bytes in 0 blocks
==492== Rerun with --leak-check=full to see details of leaked memory
==492== 
==492== For counts of detected and suppressed errors, rerun with: -v
==492== Use --track-origins=yes to see where uninitialised values come from
==492== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 9: Trying hands with straight flushes
 Checking the output 
Line_54_did_not_match
Line_57_did_not_match
Line_63_did_not_match
Your file did not match the expected ouput
 - Output did not match, testcase failed
Hand 1:								Hand 1:
--------							--------
As Ks Qs Js 0s 							As Ks Qs Js 0s 
 - Flush in suit s						 - Flush in suit s
 - Straight flush at index 0					 - Straight flush at index 0
 - The most of a kind is 1 of a kind (at index 0 / value A)	 - The most of a kind is 1 of a kind (at index 0 / value A)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: STRAIGHT_FLUSH			 - evaluate_hand's ranking: STRAIGHT_FLUSH
 - 5 cards used for hand: As Ks Qs Js 0s 			 - 5 cards used for hand: As Ks Qs Js 0s 
Hand 2:								Hand 2:
--------							--------
Kh Qh Jh 0h 9h 							Kh Qh Jh 0h 9h 
 - Flush in suit h						 - Flush in suit h
 - Straight flush at index 0					 - Straight flush at index 0
 - The most of a kind is 1 of a kind (at index 0 / value K)	 - The most of a kind is 1 of a kind (at index 0 / value K)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: STRAIGHT_FLUSH			 - evaluate_hand's ranking: STRAIGHT_FLUSH
 - 5 cards used for hand: Kh Qh Jh 0h 9h 			 - 5 cards used for hand: Kh Qh Jh 0h 9h 
Comparison : 							Comparison : 
--------------							--------------
Hand 1 wins!							Hand 1 wins!
============================					============================
Hand 1:								Hand 1:
--------							--------
As Ks Qs Js 0s 9s 8s 						As Ks Qs Js 0s 9s 8s 
 - Flush in suit s						 - Flush in suit s
 - Straight flush at index 0					 - Straight flush at index 0
 - Straight flush at index 1					 - Straight flush at index 1
 - Straight flush at index 2					 - Straight flush at index 2
 - The most of a kind is 1 of a kind (at index 0 / value A)	 - The most of a kind is 1 of a kind (at index 0 / value A)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: STRAIGHT_FLUSH			 - evaluate_hand's ranking: STRAIGHT_FLUSH
 - 5 cards used for hand: As Ks Qs Js 0s 			 - 5 cards used for hand: As Ks Qs Js 0s 
Hand 2:								Hand 2:
--------							--------
Kh Qh Jh 0h 9h 8h 7h 						Kh Qh Jh 0h 9h 8h 7h 
 - Flush in suit h						 - Flush in suit h
 - Straight flush at index 0					 - Straight flush at index 0
 - Straight flush at index 1					 - Straight flush at index 1
 - Straight flush at index 2					 - Straight flush at index 2
 - The most of a kind is 1 of a kind (at index 0 / value K)	 - The most of a kind is 1 of a kind (at index 0 / value K)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: STRAIGHT_FLUSH			 - evaluate_hand's ranking: STRAIGHT_FLUSH
 - 5 cards used for hand: Kh Qh Jh 0h 9h 			 - 5 cards used for hand: Kh Qh Jh 0h 9h 
Comparison : 							Comparison : 
--------------							--------------
Hand 1 wins!							Hand 1 wins!
============================					============================
Hand 1:								Hand 1:
--------							--------
Ac As Kc Ks Qs Js 0s 						Ac As Kc Ks Qs Js 0s 
 - Flush in suit s						 - Flush in suit s
 - Straight at index 0						 - Straight at index 0
 - Straight flush at index 1				      |	 - Straight at index 1
 - The most of a kind is 2 of a kind (at index 0 / value A)	 - The most of a kind is 2 of a kind (at index 0 / value A)
 - Secondary pair at index 2 (value K)				 - Secondary pair at index 2 (value K)
 - evaluate_hand's ranking: STRAIGHT_FLUSH		      |	 - evaluate_hand's ranking: FLUSH
 - 5 cards used for hand: As Ks Qs Js 0s 			 - 5 cards used for hand: As Ks Qs Js 0s 
Hand 2:								Hand 2:
--------							--------
Ad Kh Qh Jh Js 0h 9h 						Ad Kh Qh Jh Js 0h 9h 
 - Flush in suit h						 - Flush in suit h
 - Straight at index 0					      <
 - Straight flush at index 1				      <
 - The most of a kind is 2 of a kind (at index 3 / value J)   <
 - No secondary pair					      <
 - evaluate_hand's ranking: STRAIGHT_FLUSH		      <
 - 5 cards used for hand: Kh Qh Jh 0h 9h 		      <
Comparison : 						      <
--------------						      <
Hand 1 wins!						      <
============================				      <
Hand 1:							      <
--------						      <
Ah Kc 5h 4h 3h 2h 					      <
 - Flush in suit h					      <
 - Straight flush at index 0				      <
 - The most of a kind is 1 of a kind (at index 0 / value A)   <
 - No secondary pair					      <
 - evaluate_hand's ranking: STRAIGHT_FLUSH		      <
 - 5 cards used for hand: 5h 4h 3h 2h Ah 		      <
Hand 2:							      <
--------						      <
Ac 6c 5c 4c 3c 2c 					      <
 - Flush in suit c					      <
 - Straight flush at index 0					 - Straight flush at index 0
 - Straight flush at index 1					 - Straight flush at index 1
 - The most of a kind is 1 of a kind (at index 0 / value A)   |	 - The most of a kind is 2 of a kind (at index 3 / value J)
 - No secondary pair					      <
 - evaluate_hand's ranking: STRAIGHT_FLUSH		      <
 - 5 cards used for hand: 5c 4c 3c 2c Ac 		      <
Comparison : 						      <
--------------						      <
Tie							      <
============================				      <
Hand 1:							      <
--------						      <
As Ks Qs Js 0s 						      <
 - Flush in suit s					      <
 - Straight flush at index 0				      <
 - The most of a kind is 1 of a kind (at index 0 / value A)   <
 - No secondary pair					      <
 - evaluate_hand's ranking: STRAIGHT_FLUSH		      <
 - 5 cards used for hand: As Ks Qs Js 0s 		      <
Hand 2:							      <
--------						      <
As 5s 4s 3s 2s 						      <
 - Flush in suit s					      <
 - Straight flush at index 0				      <
 - The most of a kind is 1 of a kind (at index 0 / value A)   <
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: STRAIGHT_FLUSH		      <
 - 5 cards used for hand: 5s 4s 3s 2s As 		      <
Comparison : 						      <
--------------						      <
Hand 1 wins!						      <
============================				      <
Testcase 10: Trying each type of hand ranking
Valgrind returned an error status
==510== Memcheck, a memory error detector
==510== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==510== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==510== Command: ./test-eval inp.10.txt
==510== Parent PID: 509
==510== 
==510== Use of uninitialised value of size 8
==510==    at 0x400C02: print_hand (deck.c:19)
==510==    by 0x4028AF: describe_hand (test-eval.c:74)
==510==    by 0x402AAF: main (test-eval.c:119)
==510== 
==510== Invalid read of size 8
==510==    at 0x400C02: print_hand (deck.c:19)
==510==    by 0x4028AF: describe_hand (test-eval.c:74)
==510==    by 0x402AAF: main (test-eval.c:119)
==510==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==510== 
==510== 
==510== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==510==  Access not within mapped region at address 0x0
==510==    at 0x400C02: print_hand (deck.c:19)
==510==    by 0x4028AF: describe_hand (test-eval.c:74)
==510==    by 0x402AAF: main (test-eval.c:119)
==510==  If you believe this happened as a result of a stack
==510==  overflow in your program's main thread (unlikely but
==510==  possible), you can try to increase the size of the
==510==  main thread stack using the --main-stacksize= flag.
==510==  The main thread stack size used in this run was 8388608.
==510== 
==510== HEAP SUMMARY:
==510==     in use at exit: 880 bytes in 17 blocks
==510==   total heap usage: 210 allocs, 193 frees, 12,716 bytes allocated
==510== 
==510== LEAK SUMMARY:
==510==    definitely lost: 0 bytes in 0 blocks
==510==    indirectly lost: 0 bytes in 0 blocks
==510==      possibly lost: 0 bytes in 0 blocks
==510==    still reachable: 880 bytes in 17 blocks
==510==         suppressed: 0 bytes in 0 blocks
==510== Rerun with --leak-check=full to see details of leaked memory
==510== 
==510== For counts of detected and suppressed errors, rerun with: -v
==510== Use --track-origins=yes to see where uninitialised values come from
==510== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)

Overall Grade: F
