Grading at Mon Dec 30 22:49:11 UTC 2019
Compiling your code
rm -f test poker cards.o my-test-main.o *~
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o deck.o deck.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o eval.o eval.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o cards.o cards.c
gcc -o test-eval -ggdb3 deck.o deck-c4.o eval-c4.o eval.o test-eval.o cards.o input.o future.o
Testcase 1: Trying hands with nothing
Valgrind returned an error status
==585== Memcheck, a memory error detector
==585== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==585== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==585== Command: ./test-eval inp.1.txt
==585== Parent PID: 584
==585== 
==585== Use of uninitialised value of size 8
==585==    at 0x400C02: print_hand (deck.c:19)
==585==    by 0x4028AF: describe_hand (test-eval.c:74)
==585==    by 0x402A8F: main (test-eval.c:116)
==585== 
==585== Invalid read of size 8
==585==    at 0x400C02: print_hand (deck.c:19)
==585==    by 0x4028AF: describe_hand (test-eval.c:74)
==585==    by 0x402A8F: main (test-eval.c:116)
==585==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==585== 
==585== 
==585== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==585==  Access not within mapped region at address 0x0
==585==    at 0x400C02: print_hand (deck.c:19)
==585==    by 0x4028AF: describe_hand (test-eval.c:74)
==585==    by 0x402A8F: main (test-eval.c:116)
==585==  If you believe this happened as a result of a stack
==585==  overflow in your program's main thread (unlikely but
==585==  possible), you can try to increase the size of the
==585==  main thread stack using the --main-stacksize= flag.
==585==  The main thread stack size used in this run was 8388608.
==585== 
==585== HEAP SUMMARY:
==585==     in use at exit: 864 bytes in 16 blocks
==585==   total heap usage: 202 allocs, 186 frees, 12,472 bytes allocated
==585== 
==585== LEAK SUMMARY:
==585==    definitely lost: 0 bytes in 0 blocks
==585==    indirectly lost: 0 bytes in 0 blocks
==585==      possibly lost: 0 bytes in 0 blocks
==585==    still reachable: 864 bytes in 16 blocks
==585==         suppressed: 0 bytes in 0 blocks
==585== Rerun with --leak-check=full to see details of leaked memory
==585== 
==585== For counts of detected and suppressed errors, rerun with: -v
==585== Use --track-origins=yes to see where uninitialised values come from
==585== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 2: Trying hands with pairs
Valgrind returned an error status
==590== Memcheck, a memory error detector
==590== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==590== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==590== Command: ./test-eval inp.2.txt
==590== Parent PID: 589
==590== 
==590== Use of uninitialised value of size 8
==590==    at 0x400C02: print_hand (deck.c:19)
==590==    by 0x4028AF: describe_hand (test-eval.c:74)
==590==    by 0x402AAF: main (test-eval.c:119)
==590== 
==590== Invalid read of size 8
==590==    at 0x400C02: print_hand (deck.c:19)
==590==    by 0x4028AF: describe_hand (test-eval.c:74)
==590==    by 0x402AAF: main (test-eval.c:119)
==590==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==590== 
==590== 
==590== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==590==  Access not within mapped region at address 0x0
==590==    at 0x400C02: print_hand (deck.c:19)
==590==    by 0x4028AF: describe_hand (test-eval.c:74)
==590==    by 0x402AAF: main (test-eval.c:119)
==590==  If you believe this happened as a result of a stack
==590==  overflow in your program's main thread (unlikely but
==590==  possible), you can try to increase the size of the
==590==  main thread stack using the --main-stacksize= flag.
==590==  The main thread stack size used in this run was 8388608.
==590== 
==590== HEAP SUMMARY:
==590==     in use at exit: 880 bytes in 17 blocks
==590==   total heap usage: 32 allocs, 15 frees, 9,360 bytes allocated
==590== 
==590== LEAK SUMMARY:
==590==    definitely lost: 0 bytes in 0 blocks
==590==    indirectly lost: 0 bytes in 0 blocks
==590==      possibly lost: 0 bytes in 0 blocks
==590==    still reachable: 880 bytes in 17 blocks
==590==         suppressed: 0 bytes in 0 blocks
==590== Rerun with --leak-check=full to see details of leaked memory
==590== 
==590== For counts of detected and suppressed errors, rerun with: -v
==590== Use --track-origins=yes to see where uninitialised values come from
==590== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 3: Trying hands with 2 pairs
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 4: Trying hands with 3 of a kind
Valgrind returned an error status
==607== Memcheck, a memory error detector
==607== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==607== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==607== Command: ./test-eval inp.4.txt
==607== Parent PID: 606
==607== 
==607== Use of uninitialised value of size 8
==607==    at 0x400C02: print_hand (deck.c:19)
==607==    by 0x4028AF: describe_hand (test-eval.c:74)
==607==    by 0x402A8F: main (test-eval.c:116)
==607== 
==607== Invalid read of size 8
==607==    at 0x400C02: print_hand (deck.c:19)
==607==    by 0x4028AF: describe_hand (test-eval.c:74)
==607==    by 0x402A8F: main (test-eval.c:116)
==607==  Address 0x520bd30 is 0 bytes inside a block of size 24 free'd
==607==    at 0x4C2EDEB: free (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==607==    by 0x4020A9: evaluate_hand (eval.c:515)
==607==    by 0x402864: describe_hand (test-eval.c:68)
==607==    by 0x402A8F: main (test-eval.c:116)
==607==  Block was alloc'd at
==607==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==607==    by 0x4013DE: get_match_counts (eval-c4.c:70)
==607==    by 0x402027: evaluate_hand (eval.c:510)
==607==    by 0x402864: describe_hand (test-eval.c:68)
==607==    by 0x402A8F: main (test-eval.c:116)
==607== 
==607== 
==607== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==607==  Access not within mapped region at address 0x0
==607==    at 0x400C02: print_hand (deck.c:19)
==607==    by 0x4028AF: describe_hand (test-eval.c:74)
==607==    by 0x402A8F: main (test-eval.c:116)
==607==  If you believe this happened as a result of a stack
==607==  overflow in your program's main thread (unlikely but
==607==  possible), you can try to increase the size of the
==607==  main thread stack using the --main-stacksize= flag.
==607==  The main thread stack size used in this run was 8388608.
==607== 
==607== HEAP SUMMARY:
==607==     in use at exit: 896 bytes in 18 blocks
==607==   total heap usage: 264 allocs, 246 frees, 13,664 bytes allocated
==607== 
==607== LEAK SUMMARY:
==607==    definitely lost: 0 bytes in 0 blocks
==607==    indirectly lost: 0 bytes in 0 blocks
==607==      possibly lost: 0 bytes in 0 blocks
==607==    still reachable: 896 bytes in 18 blocks
==607==         suppressed: 0 bytes in 0 blocks
==607== Rerun with --leak-check=full to see details of leaked memory
==607== 
==607== For counts of detected and suppressed errors, rerun with: -v
==607== Use --track-origins=yes to see where uninitialised values come from
==607== ERROR SUMMARY: 4 errors from 2 contexts (suppressed: 0 from 0)
Testcase 5: Trying hands with straights
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 6: Trying hands with flushes
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 7: Trying hands with full houses
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 8: Trying hands with 4 of a kind
Valgrind returned an error status
==648== Memcheck, a memory error detector
==648== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==648== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==648== Command: ./test-eval inp.8.txt
==648== Parent PID: 647
==648== 
==648== Use of uninitialised value of size 8
==648==    at 0x400C02: print_hand (deck.c:19)
==648==    by 0x4028AF: describe_hand (test-eval.c:74)
==648==    by 0x402AAF: main (test-eval.c:119)
==648== 
==648== Invalid read of size 8
==648==    at 0x400C02: print_hand (deck.c:19)
==648==    by 0x4028AF: describe_hand (test-eval.c:74)
==648==    by 0x402AAF: main (test-eval.c:119)
==648==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==648== 
==648== 
==648== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==648==  Access not within mapped region at address 0x0
==648==    at 0x400C02: print_hand (deck.c:19)
==648==    by 0x4028AF: describe_hand (test-eval.c:74)
==648==    by 0x402AAF: main (test-eval.c:119)
==648==  If you believe this happened as a result of a stack
==648==  overflow in your program's main thread (unlikely but
==648==  possible), you can try to increase the size of the
==648==  main thread stack using the --main-stacksize= flag.
==648==  The main thread stack size used in this run was 8388608.
==648== 
==648== HEAP SUMMARY:
==648==     in use at exit: 896 bytes in 18 blocks
==648==   total heap usage: 150 allocs, 132 frees, 11,568 bytes allocated
==648== 
==648== LEAK SUMMARY:
==648==    definitely lost: 0 bytes in 0 blocks
==648==    indirectly lost: 0 bytes in 0 blocks
==648==      possibly lost: 0 bytes in 0 blocks
==648==    still reachable: 896 bytes in 18 blocks
==648==         suppressed: 0 bytes in 0 blocks
==648== Rerun with --leak-check=full to see details of leaked memory
==648== 
==648== For counts of detected and suppressed errors, rerun with: -v
==648== Use --track-origins=yes to see where uninitialised values come from
==648== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 9: Trying hands with straight flushes
 Checking the output 
Line_53_did_not_match
Your file did not match the expected ouput
 - Output did not match, testcase failed
Hand 1:								Hand 1:
--------							--------
As Ks Qs Js 0s 							As Ks Qs Js 0s 
 - Flush in suit s						 - Flush in suit s
 - Straight flush at index 0					 - Straight flush at index 0
 - The most of a kind is 1 of a kind (at index 0 / value A)	 - The most of a kind is 1 of a kind (at index 0 / value A)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: STRAIGHT_FLUSH			 - evaluate_hand's ranking: STRAIGHT_FLUSH
 - 5 cards used for hand: As Ks Qs Js 0s 			 - 5 cards used for hand: As Ks Qs Js 0s 
Hand 2:								Hand 2:
--------							--------
Kh Qh Jh 0h 9h 							Kh Qh Jh 0h 9h 
 - Flush in suit h						 - Flush in suit h
 - Straight flush at index 0					 - Straight flush at index 0
 - The most of a kind is 1 of a kind (at index 0 / value K)	 - The most of a kind is 1 of a kind (at index 0 / value K)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: STRAIGHT_FLUSH			 - evaluate_hand's ranking: STRAIGHT_FLUSH
 - 5 cards used for hand: Kh Qh Jh 0h 9h 			 - 5 cards used for hand: Kh Qh Jh 0h 9h 
Comparison : 							Comparison : 
--------------							--------------
Hand 1 wins!							Hand 1 wins!
============================					============================
Hand 1:								Hand 1:
--------							--------
As Ks Qs Js 0s 9s 8s 						As Ks Qs Js 0s 9s 8s 
 - Flush in suit s						 - Flush in suit s
 - Straight flush at index 0					 - Straight flush at index 0
 - Straight flush at index 1					 - Straight flush at index 1
 - Straight flush at index 2					 - Straight flush at index 2
 - The most of a kind is 1 of a kind (at index 0 / value A)	 - The most of a kind is 1 of a kind (at index 0 / value A)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: STRAIGHT_FLUSH			 - evaluate_hand's ranking: STRAIGHT_FLUSH
 - 5 cards used for hand: As Ks Qs Js 0s 			 - 5 cards used for hand: As Ks Qs Js 0s 
Hand 2:								Hand 2:
--------							--------
Kh Qh Jh 0h 9h 8h 7h 						Kh Qh Jh 0h 9h 8h 7h 
 - Flush in suit h						 - Flush in suit h
 - Straight flush at index 0					 - Straight flush at index 0
 - Straight flush at index 1					 - Straight flush at index 1
 - Straight flush at index 2					 - Straight flush at index 2
 - The most of a kind is 1 of a kind (at index 0 / value K)	 - The most of a kind is 1 of a kind (at index 0 / value K)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: STRAIGHT_FLUSH			 - evaluate_hand's ranking: STRAIGHT_FLUSH
 - 5 cards used for hand: Kh Qh Jh 0h 9h 			 - 5 cards used for hand: Kh Qh Jh 0h 9h 
Comparison : 							Comparison : 
--------------							--------------
Hand 1 wins!							Hand 1 wins!
============================					============================
Hand 1:								Hand 1:
--------							--------
Ac As Kc Ks Qs Js 0s 						Ac As Kc Ks Qs Js 0s 
 - Flush in suit s						 - Flush in suit s
 - Straight at index 0					      |	 - Straight flush at index 0
 - Straight flush at index 1					 - Straight flush at index 1
 - The most of a kind is 2 of a kind (at index 0 / value A)	 - The most of a kind is 2 of a kind (at index 0 / value A)
 - Secondary pair at index 2 (value K)				 - Secondary pair at index 2 (value K)
 - evaluate_hand's ranking: STRAIGHT_FLUSH		      <
 - 5 cards used for hand: As Ks Qs Js 0s 		      <
Hand 2:							      <
--------						      <
Ad Kh Qh Jh Js 0h 9h 					      <
 - Flush in suit h					      <
 - Straight at index 0					      <
 - Straight flush at index 1				      <
 - The most of a kind is 2 of a kind (at index 3 / value J)   <
 - No secondary pair					      <
 - evaluate_hand's ranking: STRAIGHT_FLUSH		      <
 - 5 cards used for hand: Kh Qh Jh 0h 9h 		      <
Comparison : 						      <
--------------						      <
Hand 1 wins!						      <
============================				      <
Hand 1:							      <
--------						      <
Ah Kc 5h 4h 3h 2h 					      <
 - Flush in suit h					      <
 - Straight flush at index 0				      <
 - The most of a kind is 1 of a kind (at index 0 / value A)   <
 - No secondary pair					      <
 - evaluate_hand's ranking: STRAIGHT_FLUSH		      <
 - 5 cards used for hand: 5h 4h 3h 2h Ah 		      <
Hand 2:							      <
--------						      <
Ac 6c 5c 4c 3c 2c 					      <
 - Flush in suit c					      <
 - Straight flush at index 0				      <
 - Straight flush at index 1				      <
 - The most of a kind is 1 of a kind (at index 0 / value A)   <
 - No secondary pair					      <
 - evaluate_hand's ranking: STRAIGHT_FLUSH		      <
 - 5 cards used for hand: 5c 4c 3c 2c Ac 		      <
Comparison : 						      <
--------------						      <
Tie							      <
============================				      <
Hand 1:							      <
--------						      <
As Ks Qs Js 0s 						      <
 - Flush in suit s					      <
 - Straight flush at index 0				      <
 - The most of a kind is 1 of a kind (at index 0 / value A)   <
 - No secondary pair					      <
 - evaluate_hand's ranking: STRAIGHT_FLUSH		      <
 - 5 cards used for hand: As Ks Qs Js 0s 		      <
Hand 2:							      <
--------						      <
As 5s 4s 3s 2s 						      <
 - Flush in suit s					      <
 - Straight flush at index 0				      <
 - The most of a kind is 1 of a kind (at index 0 / value A)   <
 - No secondary pair					      <
 - evaluate_hand's ranking: STRAIGHT_FLUSH		      <
 - 5 cards used for hand: 5s 4s 3s 2s As 		      <
Comparison : 						      <
--------------						      <
Hand 1 wins!						      <
============================				      <
Testcase 10: Trying each type of hand ranking
Valgrind returned an error status
==666== Memcheck, a memory error detector
==666== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==666== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==666== Command: ./test-eval inp.10.txt
==666== Parent PID: 665
==666== 
==666== Use of uninitialised value of size 8
==666==    at 0x400C02: print_hand (deck.c:19)
==666==    by 0x4028AF: describe_hand (test-eval.c:74)
==666==    by 0x402AAF: main (test-eval.c:119)
==666== 
==666== Invalid read of size 8
==666==    at 0x400C02: print_hand (deck.c:19)
==666==    by 0x4028AF: describe_hand (test-eval.c:74)
==666==    by 0x402AAF: main (test-eval.c:119)
==666==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==666== 
==666== 
==666== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==666==  Access not within mapped region at address 0x0
==666==    at 0x400C02: print_hand (deck.c:19)
==666==    by 0x4028AF: describe_hand (test-eval.c:74)
==666==    by 0x402AAF: main (test-eval.c:119)
==666==  If you believe this happened as a result of a stack
==666==  overflow in your program's main thread (unlikely but
==666==  possible), you can try to increase the size of the
==666==  main thread stack using the --main-stacksize= flag.
==666==  The main thread stack size used in this run was 8388608.
==666== 
==666== HEAP SUMMARY:
==666==     in use at exit: 880 bytes in 17 blocks
==666==   total heap usage: 210 allocs, 193 frees, 12,716 bytes allocated
==666== 
==666== LEAK SUMMARY:
==666==    definitely lost: 0 bytes in 0 blocks
==666==    indirectly lost: 0 bytes in 0 blocks
==666==      possibly lost: 0 bytes in 0 blocks
==666==    still reachable: 880 bytes in 17 blocks
==666==         suppressed: 0 bytes in 0 blocks
==666== Rerun with --leak-check=full to see details of leaked memory
==666== 
==666== For counts of detected and suppressed errors, rerun with: -v
==666== Use --track-origins=yes to see where uninitialised values come from
==666== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)

Overall Grade: F
