Grading at Fri Dec 27 03:58:01 UTC 2019
Compiling your code
rm -f test poker cards.o my-test-main.o *~
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o deck.o deck.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o eval.o eval.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o cards.o cards.c
gcc -o test-eval -ggdb3 deck.o deck-c4.o eval-c4.o eval.o test-eval.o cards.o input.o future.o
Testcase 1: Trying hands with nothing
Valgrind returned an error status
==547== Memcheck, a memory error detector
==547== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==547== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==547== Command: ./test-eval inp.1.txt
==547== Parent PID: 546
==547== 
==547== Invalid read of size 8
==547==    at 0x4027E8: describe_hand (test-eval.c:60)
==547==    by 0x402A9D: main (test-eval.c:116)
==547==  Address 0x5205758 is 8 bytes before a block of size 48 alloc'd
==547==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==547==    by 0x401054: add_card_to (deck-c4.c:29)
==547==    by 0x40323B: hand_from_string (input.c:49)
==547==    by 0x402A22: main (test-eval.c:110)
==547== 
==547== Invalid read of size 8
==547==    at 0x4027EB: describe_hand (test-eval.c:60)
==547==    by 0x402A9D: main (test-eval.c:116)
==547==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==547== 
==547== 
==547== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==547==  Access not within mapped region at address 0x0
==547==    at 0x4027EB: describe_hand (test-eval.c:60)
==547==    by 0x402A9D: main (test-eval.c:116)
==547==  If you believe this happened as a result of a stack
==547==  overflow in your program's main thread (unlikely but
==547==  possible), you can try to increase the size of the
==547==  main thread stack using the --main-stacksize= flag.
==547==  The main thread stack size used in this run was 8388608.
==547== 
==547== HEAP SUMMARY:
==547==     in use at exit: 896 bytes in 18 blocks
==547==   total heap usage: 31 allocs, 13 frees, 9,352 bytes allocated
==547== 
==547== LEAK SUMMARY:
==547==    definitely lost: 0 bytes in 0 blocks
==547==    indirectly lost: 0 bytes in 0 blocks
==547==      possibly lost: 0 bytes in 0 blocks
==547==    still reachable: 896 bytes in 18 blocks
==547==         suppressed: 0 bytes in 0 blocks
==547== Rerun with --leak-check=full to see details of leaked memory
==547== 
==547== For counts of detected and suppressed errors, rerun with: -v
==547== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 2: Trying hands with pairs
Valgrind returned an error status
==552== Memcheck, a memory error detector
==552== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==552== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==552== Command: ./test-eval inp.2.txt
==552== Parent PID: 551
==552== 
==552== Invalid read of size 8
==552==    at 0x4027E8: describe_hand (test-eval.c:60)
==552==    by 0x402A9D: main (test-eval.c:116)
==552==  Address 0x5205758 is 8 bytes before a block of size 48 alloc'd
==552==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==552==    by 0x401054: add_card_to (deck-c4.c:29)
==552==    by 0x40323B: hand_from_string (input.c:49)
==552==    by 0x402A22: main (test-eval.c:110)
==552== 
==552== Invalid read of size 8
==552==    at 0x4027EB: describe_hand (test-eval.c:60)
==552==    by 0x402A9D: main (test-eval.c:116)
==552==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==552== 
==552== 
==552== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==552==  Access not within mapped region at address 0x0
==552==    at 0x4027EB: describe_hand (test-eval.c:60)
==552==    by 0x402A9D: main (test-eval.c:116)
==552==  If you believe this happened as a result of a stack
==552==  overflow in your program's main thread (unlikely but
==552==  possible), you can try to increase the size of the
==552==  main thread stack using the --main-stacksize= flag.
==552==  The main thread stack size used in this run was 8388608.
==552== 
==552== HEAP SUMMARY:
==552==     in use at exit: 880 bytes in 17 blocks
==552==   total heap usage: 29 allocs, 12 frees, 9,296 bytes allocated
==552== 
==552== LEAK SUMMARY:
==552==    definitely lost: 0 bytes in 0 blocks
==552==    indirectly lost: 0 bytes in 0 blocks
==552==      possibly lost: 0 bytes in 0 blocks
==552==    still reachable: 880 bytes in 17 blocks
==552==         suppressed: 0 bytes in 0 blocks
==552== Rerun with --leak-check=full to see details of leaked memory
==552== 
==552== For counts of detected and suppressed errors, rerun with: -v
==552== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 3: Trying hands with 2 pairs
Valgrind returned an error status
==557== Memcheck, a memory error detector
==557== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==557== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==557== Command: ./test-eval inp.3.txt
==557== Parent PID: 556
==557== 
==557== Invalid read of size 8
==557==    at 0x4027E8: describe_hand (test-eval.c:60)
==557==    by 0x402A9D: main (test-eval.c:116)
==557==  Address 0x5205698 is 8 bytes before a block of size 40 alloc'd
==557==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==557==    by 0x401054: add_card_to (deck-c4.c:29)
==557==    by 0x40323B: hand_from_string (input.c:49)
==557==    by 0x402A22: main (test-eval.c:110)
==557== 
==557== Invalid read of size 8
==557==    at 0x4027EB: describe_hand (test-eval.c:60)
==557==    by 0x402A9D: main (test-eval.c:116)
==557==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==557== 
==557== 
==557== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==557==  Access not within mapped region at address 0x0
==557==    at 0x4027EB: describe_hand (test-eval.c:60)
==557==    by 0x402A9D: main (test-eval.c:116)
==557==  If you believe this happened as a result of a stack
==557==  overflow in your program's main thread (unlikely but
==557==  possible), you can try to increase the size of the
==557==  main thread stack using the --main-stacksize= flag.
==557==  The main thread stack size used in this run was 8388608.
==557== 
==557== HEAP SUMMARY:
==557==     in use at exit: 864 bytes in 16 blocks
==557==   total heap usage: 27 allocs, 11 frees, 9,236 bytes allocated
==557== 
==557== LEAK SUMMARY:
==557==    definitely lost: 0 bytes in 0 blocks
==557==    indirectly lost: 0 bytes in 0 blocks
==557==      possibly lost: 0 bytes in 0 blocks
==557==    still reachable: 864 bytes in 16 blocks
==557==         suppressed: 0 bytes in 0 blocks
==557== Rerun with --leak-check=full to see details of leaked memory
==557== 
==557== For counts of detected and suppressed errors, rerun with: -v
==557== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 4: Trying hands with 3 of a kind
Valgrind returned an error status
==562== Memcheck, a memory error detector
==562== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==562== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==562== Command: ./test-eval inp.4.txt
==562== Parent PID: 561
==562== 
==562== Invalid read of size 8
==562==    at 0x4027E8: describe_hand (test-eval.c:60)
==562==    by 0x402A9D: main (test-eval.c:116)
==562==  Address 0x5205758 is 8 bytes before a block of size 48 alloc'd
==562==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==562==    by 0x401054: add_card_to (deck-c4.c:29)
==562==    by 0x40323B: hand_from_string (input.c:49)
==562==    by 0x402A22: main (test-eval.c:110)
==562== 
==562== Invalid read of size 8
==562==    at 0x4027EB: describe_hand (test-eval.c:60)
==562==    by 0x402A9D: main (test-eval.c:116)
==562==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==562== 
==562== 
==562== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==562==  Access not within mapped region at address 0x0
==562==    at 0x4027EB: describe_hand (test-eval.c:60)
==562==    by 0x402A9D: main (test-eval.c:116)
==562==  If you believe this happened as a result of a stack
==562==  overflow in your program's main thread (unlikely but
==562==  possible), you can try to increase the size of the
==562==  main thread stack using the --main-stacksize= flag.
==562==  The main thread stack size used in this run was 8388608.
==562== 
==562== HEAP SUMMARY:
==562==     in use at exit: 896 bytes in 18 blocks
==562==   total heap usage: 31 allocs, 13 frees, 9,352 bytes allocated
==562== 
==562== LEAK SUMMARY:
==562==    definitely lost: 0 bytes in 0 blocks
==562==    indirectly lost: 0 bytes in 0 blocks
==562==      possibly lost: 0 bytes in 0 blocks
==562==    still reachable: 896 bytes in 18 blocks
==562==         suppressed: 0 bytes in 0 blocks
==562== Rerun with --leak-check=full to see details of leaked memory
==562== 
==562== For counts of detected and suppressed errors, rerun with: -v
==562== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 5: Trying hands with straights
Valgrind returned an error status
==567== Memcheck, a memory error detector
==567== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==567== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==567== Command: ./test-eval inp.5.txt
==567== Parent PID: 566
==567== 
==567== Invalid read of size 8
==567==    at 0x4027E8: describe_hand (test-eval.c:60)
==567==    by 0x402A9D: main (test-eval.c:116)
==567==  Address 0x5205698 is 8 bytes before a block of size 40 alloc'd
==567==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==567==    by 0x401054: add_card_to (deck-c4.c:29)
==567==    by 0x40323B: hand_from_string (input.c:49)
==567==    by 0x402A22: main (test-eval.c:110)
==567== 
==567== Invalid read of size 8
==567==    at 0x4027EB: describe_hand (test-eval.c:60)
==567==    by 0x402A9D: main (test-eval.c:116)
==567==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==567== 
==567== 
==567== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==567==  Access not within mapped region at address 0x0
==567==    at 0x4027EB: describe_hand (test-eval.c:60)
==567==    by 0x402A9D: main (test-eval.c:116)
==567==  If you believe this happened as a result of a stack
==567==  overflow in your program's main thread (unlikely but
==567==  possible), you can try to increase the size of the
==567==  main thread stack using the --main-stacksize= flag.
==567==  The main thread stack size used in this run was 8388608.
==567== 
==567== HEAP SUMMARY:
==567==     in use at exit: 864 bytes in 16 blocks
==567==   total heap usage: 27 allocs, 11 frees, 9,236 bytes allocated
==567== 
==567== LEAK SUMMARY:
==567==    definitely lost: 0 bytes in 0 blocks
==567==    indirectly lost: 0 bytes in 0 blocks
==567==      possibly lost: 0 bytes in 0 blocks
==567==    still reachable: 864 bytes in 16 blocks
==567==         suppressed: 0 bytes in 0 blocks
==567== Rerun with --leak-check=full to see details of leaked memory
==567== 
==567== For counts of detected and suppressed errors, rerun with: -v
==567== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 6: Trying hands with flushes
Valgrind returned an error status
==572== Memcheck, a memory error detector
==572== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==572== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==572== Command: ./test-eval inp.6.txt
==572== Parent PID: 571
==572== 
==572== Invalid read of size 8
==572==    at 0x4027E8: describe_hand (test-eval.c:60)
==572==    by 0x402A9D: main (test-eval.c:116)
==572==  Address 0x5205758 is 8 bytes before a block of size 48 alloc'd
==572==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==572==    by 0x401054: add_card_to (deck-c4.c:29)
==572==    by 0x40323B: hand_from_string (input.c:49)
==572==    by 0x402A22: main (test-eval.c:110)
==572== 
==572== Invalid read of size 8
==572==    at 0x4027EB: describe_hand (test-eval.c:60)
==572==    by 0x402A9D: main (test-eval.c:116)
==572==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==572== 
==572== 
==572== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==572==  Access not within mapped region at address 0x0
==572==    at 0x4027EB: describe_hand (test-eval.c:60)
==572==    by 0x402A9D: main (test-eval.c:116)
==572==  If you believe this happened as a result of a stack
==572==  overflow in your program's main thread (unlikely but
==572==  possible), you can try to increase the size of the
==572==  main thread stack using the --main-stacksize= flag.
==572==  The main thread stack size used in this run was 8388608.
==572== 
==572== HEAP SUMMARY:
==572==     in use at exit: 896 bytes in 18 blocks
==572==   total heap usage: 31 allocs, 13 frees, 9,352 bytes allocated
==572== 
==572== LEAK SUMMARY:
==572==    definitely lost: 0 bytes in 0 blocks
==572==    indirectly lost: 0 bytes in 0 blocks
==572==      possibly lost: 0 bytes in 0 blocks
==572==    still reachable: 896 bytes in 18 blocks
==572==         suppressed: 0 bytes in 0 blocks
==572== Rerun with --leak-check=full to see details of leaked memory
==572== 
==572== For counts of detected and suppressed errors, rerun with: -v
==572== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 7: Trying hands with full houses
Valgrind returned an error status
==577== Memcheck, a memory error detector
==577== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==577== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==577== Command: ./test-eval inp.7.txt
==577== Parent PID: 576
==577== 
==577== Invalid read of size 8
==577==    at 0x4027E8: describe_hand (test-eval.c:60)
==577==    by 0x402A9D: main (test-eval.c:116)
==577==  Address 0x5205818 is 8 bytes before a block of size 56 alloc'd
==577==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==577==    by 0x401054: add_card_to (deck-c4.c:29)
==577==    by 0x40323B: hand_from_string (input.c:49)
==577==    by 0x402A22: main (test-eval.c:110)
==577== 
==577== Invalid read of size 8
==577==    at 0x4027EB: describe_hand (test-eval.c:60)
==577==    by 0x402A9D: main (test-eval.c:116)
==577==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==577== 
==577== 
==577== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==577==  Access not within mapped region at address 0x0
==577==    at 0x4027EB: describe_hand (test-eval.c:60)
==577==    by 0x402A9D: main (test-eval.c:116)
==577==  If you believe this happened as a result of a stack
==577==  overflow in your program's main thread (unlikely but
==577==  possible), you can try to increase the size of the
==577==  main thread stack using the --main-stacksize= flag.
==577==  The main thread stack size used in this run was 8388608.
==577== 
==577== HEAP SUMMARY:
==577==     in use at exit: 928 bytes in 20 blocks
==577==   total heap usage: 35 allocs, 15 frees, 9,484 bytes allocated
==577== 
==577== LEAK SUMMARY:
==577==    definitely lost: 0 bytes in 0 blocks
==577==    indirectly lost: 0 bytes in 0 blocks
==577==      possibly lost: 0 bytes in 0 blocks
==577==    still reachable: 928 bytes in 20 blocks
==577==         suppressed: 0 bytes in 0 blocks
==577== Rerun with --leak-check=full to see details of leaked memory
==577== 
==577== For counts of detected and suppressed errors, rerun with: -v
==577== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 8: Trying hands with 4 of a kind
Valgrind returned an error status
==582== Memcheck, a memory error detector
==582== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==582== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==582== Command: ./test-eval inp.8.txt
==582== Parent PID: 581
==582== 
==582== Invalid read of size 8
==582==    at 0x4027E8: describe_hand (test-eval.c:60)
==582==    by 0x402A9D: main (test-eval.c:116)
==582==  Address 0x5205758 is 8 bytes before a block of size 48 alloc'd
==582==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==582==    by 0x401054: add_card_to (deck-c4.c:29)
==582==    by 0x40323B: hand_from_string (input.c:49)
==582==    by 0x402A22: main (test-eval.c:110)
==582== 
==582== Invalid read of size 8
==582==    at 0x4027EB: describe_hand (test-eval.c:60)
==582==    by 0x402A9D: main (test-eval.c:116)
==582==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==582== 
==582== 
==582== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==582==  Access not within mapped region at address 0x0
==582==    at 0x4027EB: describe_hand (test-eval.c:60)
==582==    by 0x402A9D: main (test-eval.c:116)
==582==  If you believe this happened as a result of a stack
==582==  overflow in your program's main thread (unlikely but
==582==  possible), you can try to increase the size of the
==582==  main thread stack using the --main-stacksize= flag.
==582==  The main thread stack size used in this run was 8388608.
==582== 
==582== HEAP SUMMARY:
==582==     in use at exit: 896 bytes in 18 blocks
==582==   total heap usage: 31 allocs, 13 frees, 9,352 bytes allocated
==582== 
==582== LEAK SUMMARY:
==582==    definitely lost: 0 bytes in 0 blocks
==582==    indirectly lost: 0 bytes in 0 blocks
==582==      possibly lost: 0 bytes in 0 blocks
==582==    still reachable: 896 bytes in 18 blocks
==582==         suppressed: 0 bytes in 0 blocks
==582== Rerun with --leak-check=full to see details of leaked memory
==582== 
==582== For counts of detected and suppressed errors, rerun with: -v
==582== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 9: Trying hands with straight flushes
Valgrind returned an error status
==587== Memcheck, a memory error detector
==587== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==587== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==587== Command: ./test-eval inp.9.txt
==587== Parent PID: 586
==587== 
==587== Invalid read of size 8
==587==    at 0x4027E8: describe_hand (test-eval.c:60)
==587==    by 0x402A9D: main (test-eval.c:116)
==587==  Address 0x5205698 is 8 bytes before a block of size 40 alloc'd
==587==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==587==    by 0x401054: add_card_to (deck-c4.c:29)
==587==    by 0x40323B: hand_from_string (input.c:49)
==587==    by 0x402A22: main (test-eval.c:110)
==587== 
==587== Invalid read of size 8
==587==    at 0x4027EB: describe_hand (test-eval.c:60)
==587==    by 0x402A9D: main (test-eval.c:116)
==587==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==587== 
==587== 
==587== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==587==  Access not within mapped region at address 0x0
==587==    at 0x4027EB: describe_hand (test-eval.c:60)
==587==    by 0x402A9D: main (test-eval.c:116)
==587==  If you believe this happened as a result of a stack
==587==  overflow in your program's main thread (unlikely but
==587==  possible), you can try to increase the size of the
==587==  main thread stack using the --main-stacksize= flag.
==587==  The main thread stack size used in this run was 8388608.
==587== 
==587== HEAP SUMMARY:
==587==     in use at exit: 864 bytes in 16 blocks
==587==   total heap usage: 27 allocs, 11 frees, 9,236 bytes allocated
==587== 
==587== LEAK SUMMARY:
==587==    definitely lost: 0 bytes in 0 blocks
==587==    indirectly lost: 0 bytes in 0 blocks
==587==      possibly lost: 0 bytes in 0 blocks
==587==    still reachable: 864 bytes in 16 blocks
==587==         suppressed: 0 bytes in 0 blocks
==587== Rerun with --leak-check=full to see details of leaked memory
==587== 
==587== For counts of detected and suppressed errors, rerun with: -v
==587== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 10: Trying each type of hand ranking
Valgrind returned an error status
==592== Memcheck, a memory error detector
==592== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==592== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==592== Command: ./test-eval inp.10.txt
==592== Parent PID: 591
==592== 
==592== Invalid read of size 8
==592==    at 0x4027E8: describe_hand (test-eval.c:60)
==592==    by 0x402A9D: main (test-eval.c:116)
==592==  Address 0x5205758 is 8 bytes before a block of size 48 alloc'd
==592==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==592==    by 0x401054: add_card_to (deck-c4.c:29)
==592==    by 0x40323B: hand_from_string (input.c:49)
==592==    by 0x402A22: main (test-eval.c:110)
==592== 
==592== Invalid read of size 8
==592==    at 0x4027EB: describe_hand (test-eval.c:60)
==592==    by 0x402A9D: main (test-eval.c:116)
==592==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==592== 
==592== 
==592== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==592==  Access not within mapped region at address 0x0
==592==    at 0x4027EB: describe_hand (test-eval.c:60)
==592==    by 0x402A9D: main (test-eval.c:116)
==592==  If you believe this happened as a result of a stack
==592==  overflow in your program's main thread (unlikely but
==592==  possible), you can try to increase the size of the
==592==  main thread stack using the --main-stacksize= flag.
==592==  The main thread stack size used in this run was 8388608.
==592== 
==592== HEAP SUMMARY:
==592==     in use at exit: 896 bytes in 18 blocks
==592==   total heap usage: 31 allocs, 13 frees, 9,352 bytes allocated
==592== 
==592== LEAK SUMMARY:
==592==    definitely lost: 0 bytes in 0 blocks
==592==    indirectly lost: 0 bytes in 0 blocks
==592==      possibly lost: 0 bytes in 0 blocks
==592==    still reachable: 896 bytes in 18 blocks
==592==         suppressed: 0 bytes in 0 blocks
==592== Rerun with --leak-check=full to see details of leaked memory
==592== 
==592== For counts of detected and suppressed errors, rerun with: -v
==592== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)

Overall Grade: F
