Grading at Fri Dec 27 06:21:11 UTC 2019
Compiling your code
rm -f test poker cards.o my-test-main.o *~
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o deck.o deck.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o eval.o eval.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o cards.o cards.c
gcc -o test-eval -ggdb3 deck.o deck-c4.o eval-c4.o eval.o test-eval.o cards.o input.o future.o
Testcase 1: Trying hands with nothing
Valgrind returned an error status
==4075== Memcheck, a memory error detector
==4075== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==4075== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==4075== Command: ./test-eval inp.1.txt
==4075== Parent PID: 4074
==4075== 
==4075== Use of uninitialised value of size 8
==4075==    at 0x400C02: print_hand (deck.c:19)
==4075==    by 0x4028A7: describe_hand (test-eval.c:74)
==4075==    by 0x402A87: main (test-eval.c:116)
==4075== 
==4075== Invalid read of size 8
==4075==    at 0x400C02: print_hand (deck.c:19)
==4075==    by 0x4028A7: describe_hand (test-eval.c:74)
==4075==    by 0x402A87: main (test-eval.c:116)
==4075==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==4075== 
==4075== 
==4075== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==4075==  Access not within mapped region at address 0x0
==4075==    at 0x400C02: print_hand (deck.c:19)
==4075==    by 0x4028A7: describe_hand (test-eval.c:74)
==4075==    by 0x402A87: main (test-eval.c:116)
==4075==  If you believe this happened as a result of a stack
==4075==  overflow in your program's main thread (unlikely but
==4075==  possible), you can try to increase the size of the
==4075==  main thread stack using the --main-stacksize= flag.
==4075==  The main thread stack size used in this run was 8388608.
==4075== 
==4075== HEAP SUMMARY:
==4075==     in use at exit: 864 bytes in 16 blocks
==4075==   total heap usage: 202 allocs, 186 frees, 12,472 bytes allocated
==4075== 
==4075== LEAK SUMMARY:
==4075==    definitely lost: 0 bytes in 0 blocks
==4075==    indirectly lost: 0 bytes in 0 blocks
==4075==      possibly lost: 0 bytes in 0 blocks
==4075==    still reachable: 864 bytes in 16 blocks
==4075==         suppressed: 0 bytes in 0 blocks
==4075== Rerun with --leak-check=full to see details of leaked memory
==4075== 
==4075== For counts of detected and suppressed errors, rerun with: -v
==4075== Use --track-origins=yes to see where uninitialised values come from
==4075== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 2: Trying hands with pairs
Valgrind returned an error status
==4080== Memcheck, a memory error detector
==4080== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==4080== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==4080== Command: ./test-eval inp.2.txt
==4080== Parent PID: 4079
==4080== 
==4080== Use of uninitialised value of size 8
==4080==    at 0x400C02: print_hand (deck.c:19)
==4080==    by 0x4028A7: describe_hand (test-eval.c:74)
==4080==    by 0x402AA7: main (test-eval.c:119)
==4080== 
==4080== Invalid read of size 8
==4080==    at 0x400C02: print_hand (deck.c:19)
==4080==    by 0x4028A7: describe_hand (test-eval.c:74)
==4080==    by 0x402AA7: main (test-eval.c:119)
==4080==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==4080== 
==4080== 
==4080== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==4080==  Access not within mapped region at address 0x0
==4080==    at 0x400C02: print_hand (deck.c:19)
==4080==    by 0x4028A7: describe_hand (test-eval.c:74)
==4080==    by 0x402AA7: main (test-eval.c:119)
==4080==  If you believe this happened as a result of a stack
==4080==  overflow in your program's main thread (unlikely but
==4080==  possible), you can try to increase the size of the
==4080==  main thread stack using the --main-stacksize= flag.
==4080==  The main thread stack size used in this run was 8388608.
==4080== 
==4080== HEAP SUMMARY:
==4080==     in use at exit: 880 bytes in 17 blocks
==4080==   total heap usage: 32 allocs, 15 frees, 9,360 bytes allocated
==4080== 
==4080== LEAK SUMMARY:
==4080==    definitely lost: 0 bytes in 0 blocks
==4080==    indirectly lost: 0 bytes in 0 blocks
==4080==      possibly lost: 0 bytes in 0 blocks
==4080==    still reachable: 880 bytes in 17 blocks
==4080==         suppressed: 0 bytes in 0 blocks
==4080== Rerun with --leak-check=full to see details of leaked memory
==4080== 
==4080== For counts of detected and suppressed errors, rerun with: -v
==4080== Use --track-origins=yes to see where uninitialised values come from
==4080== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 3: Trying hands with 2 pairs
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 4: Trying hands with 3 of a kind
Valgrind returned an error status
==4097== Memcheck, a memory error detector
==4097== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==4097== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==4097== Command: ./test-eval inp.4.txt
==4097== Parent PID: 4096
==4097== 
==4097== Use of uninitialised value of size 8
==4097==    at 0x400C02: print_hand (deck.c:19)
==4097==    by 0x4028A7: describe_hand (test-eval.c:74)
==4097==    by 0x402A87: main (test-eval.c:116)
==4097== 
==4097== Invalid read of size 8
==4097==    at 0x400C02: print_hand (deck.c:19)
==4097==    by 0x4028A7: describe_hand (test-eval.c:74)
==4097==    by 0x402A87: main (test-eval.c:116)
==4097==  Address 0x520bd30 is 0 bytes inside a block of size 24 free'd
==4097==    at 0x4C2EDEB: free (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==4097==    by 0x4020A1: evaluate_hand (eval.c:514)
==4097==    by 0x40285C: describe_hand (test-eval.c:68)
==4097==    by 0x402A87: main (test-eval.c:116)
==4097==  Block was alloc'd at
==4097==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==4097==    by 0x4013DE: get_match_counts (eval-c4.c:70)
==4097==    by 0x40201F: evaluate_hand (eval.c:509)
==4097==    by 0x40285C: describe_hand (test-eval.c:68)
==4097==    by 0x402A87: main (test-eval.c:116)
==4097== 
==4097== 
==4097== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==4097==  Access not within mapped region at address 0x0
==4097==    at 0x400C02: print_hand (deck.c:19)
==4097==    by 0x4028A7: describe_hand (test-eval.c:74)
==4097==    by 0x402A87: main (test-eval.c:116)
==4097==  If you believe this happened as a result of a stack
==4097==  overflow in your program's main thread (unlikely but
==4097==  possible), you can try to increase the size of the
==4097==  main thread stack using the --main-stacksize= flag.
==4097==  The main thread stack size used in this run was 8388608.
==4097== 
==4097== HEAP SUMMARY:
==4097==     in use at exit: 896 bytes in 18 blocks
==4097==   total heap usage: 264 allocs, 246 frees, 13,664 bytes allocated
==4097== 
==4097== LEAK SUMMARY:
==4097==    definitely lost: 0 bytes in 0 blocks
==4097==    indirectly lost: 0 bytes in 0 blocks
==4097==      possibly lost: 0 bytes in 0 blocks
==4097==    still reachable: 896 bytes in 18 blocks
==4097==         suppressed: 0 bytes in 0 blocks
==4097== Rerun with --leak-check=full to see details of leaked memory
==4097== 
==4097== For counts of detected and suppressed errors, rerun with: -v
==4097== Use --track-origins=yes to see where uninitialised values come from
==4097== ERROR SUMMARY: 4 errors from 2 contexts (suppressed: 0 from 0)
Testcase 5: Trying hands with straights
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 6: Trying hands with flushes
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 7: Trying hands with full houses
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 8: Trying hands with 4 of a kind
Valgrind returned an error status
==4138== Memcheck, a memory error detector
==4138== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==4138== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==4138== Command: ./test-eval inp.8.txt
==4138== Parent PID: 4137
==4138== 
==4138== Use of uninitialised value of size 8
==4138==    at 0x400C02: print_hand (deck.c:19)
==4138==    by 0x4028A7: describe_hand (test-eval.c:74)
==4138==    by 0x402AA7: main (test-eval.c:119)
==4138== 
==4138== Invalid read of size 8
==4138==    at 0x400C02: print_hand (deck.c:19)
==4138==    by 0x4028A7: describe_hand (test-eval.c:74)
==4138==    by 0x402AA7: main (test-eval.c:119)
==4138==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==4138== 
==4138== 
==4138== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==4138==  Access not within mapped region at address 0x0
==4138==    at 0x400C02: print_hand (deck.c:19)
==4138==    by 0x4028A7: describe_hand (test-eval.c:74)
==4138==    by 0x402AA7: main (test-eval.c:119)
==4138==  If you believe this happened as a result of a stack
==4138==  overflow in your program's main thread (unlikely but
==4138==  possible), you can try to increase the size of the
==4138==  main thread stack using the --main-stacksize= flag.
==4138==  The main thread stack size used in this run was 8388608.
==4138== 
==4138== HEAP SUMMARY:
==4138==     in use at exit: 896 bytes in 18 blocks
==4138==   total heap usage: 150 allocs, 132 frees, 11,568 bytes allocated
==4138== 
==4138== LEAK SUMMARY:
==4138==    definitely lost: 0 bytes in 0 blocks
==4138==    indirectly lost: 0 bytes in 0 blocks
==4138==      possibly lost: 0 bytes in 0 blocks
==4138==    still reachable: 896 bytes in 18 blocks
==4138==         suppressed: 0 bytes in 0 blocks
==4138== Rerun with --leak-check=full to see details of leaked memory
==4138== 
==4138== For counts of detected and suppressed errors, rerun with: -v
==4138== Use --track-origins=yes to see where uninitialised values come from
==4138== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 9: Trying hands with straight flushes
 Checking the output 
Line_54_did_not_match
Line_57_did_not_match
Line_63_did_not_match
Your file did not match the expected ouput
 - Output did not match, testcase failed
Hand 1:								Hand 1:
--------							--------
As Ks Qs Js 0s 							As Ks Qs Js 0s 
 - Flush in suit s						 - Flush in suit s
 - Straight flush at index 0					 - Straight flush at index 0
 - The most of a kind is 1 of a kind (at index 0 / value A)	 - The most of a kind is 1 of a kind (at index 0 / value A)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: STRAIGHT_FLUSH			 - evaluate_hand's ranking: STRAIGHT_FLUSH
 - 5 cards used for hand: As Ks Qs Js 0s 			 - 5 cards used for hand: As Ks Qs Js 0s 
Hand 2:								Hand 2:
--------							--------
Kh Qh Jh 0h 9h 							Kh Qh Jh 0h 9h 
 - Flush in suit h						 - Flush in suit h
 - Straight flush at index 0					 - Straight flush at index 0
 - The most of a kind is 1 of a kind (at index 0 / value K)	 - The most of a kind is 1 of a kind (at index 0 / value K)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: STRAIGHT_FLUSH			 - evaluate_hand's ranking: STRAIGHT_FLUSH
 - 5 cards used for hand: Kh Qh Jh 0h 9h 			 - 5 cards used for hand: Kh Qh Jh 0h 9h 
Comparison : 							Comparison : 
--------------							--------------
Hand 1 wins!							Hand 1 wins!
============================					============================
Hand 1:								Hand 1:
--------							--------
As Ks Qs Js 0s 9s 8s 						As Ks Qs Js 0s 9s 8s 
 - Flush in suit s						 - Flush in suit s
 - Straight flush at index 0					 - Straight flush at index 0
 - Straight flush at index 1					 - Straight flush at index 1
 - Straight flush at index 2					 - Straight flush at index 2
 - The most of a kind is 1 of a kind (at index 0 / value A)	 - The most of a kind is 1 of a kind (at index 0 / value A)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: STRAIGHT_FLUSH			 - evaluate_hand's ranking: STRAIGHT_FLUSH
 - 5 cards used for hand: As Ks Qs Js 0s 			 - 5 cards used for hand: As Ks Qs Js 0s 
Hand 2:								Hand 2:
--------							--------
Kh Qh Jh 0h 9h 8h 7h 						Kh Qh Jh 0h 9h 8h 7h 
 - Flush in suit h						 - Flush in suit h
 - Straight flush at index 0					 - Straight flush at index 0
 - Straight flush at index 1					 - Straight flush at index 1
 - Straight flush at index 2					 - Straight flush at index 2
 - The most of a kind is 1 of a kind (at index 0 / value K)	 - The most of a kind is 1 of a kind (at index 0 / value K)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: STRAIGHT_FLUSH			 - evaluate_hand's ranking: STRAIGHT_FLUSH
 - 5 cards used for hand: Kh Qh Jh 0h 9h 			 - 5 cards used for hand: Kh Qh Jh 0h 9h 
Comparison : 							Comparison : 
--------------							--------------
Hand 1 wins!							Hand 1 wins!
============================					============================
Hand 1:								Hand 1:
--------							--------
Ac As Kc Ks Qs Js 0s 						Ac As Kc Ks Qs Js 0s 
 - Flush in suit s						 - Flush in suit s
 - Straight at index 0						 - Straight at index 0
 - Straight flush at index 1				      |	 - Straight at index 1
 - The most of a kind is 2 of a kind (at index 0 / value A)	 - The most of a kind is 2 of a kind (at index 0 / value A)
 - Secondary pair at index 2 (value K)				 - Secondary pair at index 2 (value K)
 - evaluate_hand's ranking: STRAIGHT_FLUSH		      |	 - evaluate_hand's ranking: FLUSH
 - 5 cards used for hand: As Ks Qs Js 0s 			 - 5 cards used for hand: As Ks Qs Js 0s 
Hand 2:								Hand 2:
--------							--------
Ad Kh Qh Jh Js 0h 9h 						Ad Kh Qh Jh Js 0h 9h 
 - Flush in suit h						 - Flush in suit h
 - Straight at index 0					      <
 - Straight flush at index 1				      <
 - The most of a kind is 2 of a kind (at index 3 / value J)   <
 - No secondary pair					      <
 - evaluate_hand's ranking: STRAIGHT_FLUSH		      <
 - 5 cards used for hand: Kh Qh Jh 0h 9h 		      <
Comparison : 						      <
--------------						      <
Hand 1 wins!						      <
============================				      <
Hand 1:							      <
--------						      <
Ah Kc 5h 4h 3h 2h 					      <
 - Flush in suit h					      <
 - Straight flush at index 0				      <
 - The most of a kind is 1 of a kind (at index 0 / value A)   <
 - No secondary pair					      <
 - evaluate_hand's ranking: STRAIGHT_FLUSH		      <
 - 5 cards used for hand: 5h 4h 3h 2h Ah 		      <
Hand 2:							      <
--------						      <
Ac 6c 5c 4c 3c 2c 					      <
 - Flush in suit c					      <
 - Straight flush at index 0					 - Straight flush at index 0
 - Straight flush at index 1					 - Straight flush at index 1
 - The most of a kind is 1 of a kind (at index 0 / value A)   |	 - The most of a kind is 2 of a kind (at index 3 / value J)
 - No secondary pair					      <
 - evaluate_hand's ranking: STRAIGHT_FLUSH		      <
 - 5 cards used for hand: 5c 4c 3c 2c Ac 		      <
Comparison : 						      <
--------------						      <
Tie							      <
============================				      <
Hand 1:							      <
--------						      <
As Ks Qs Js 0s 						      <
 - Flush in suit s					      <
 - Straight flush at index 0				      <
 - The most of a kind is 1 of a kind (at index 0 / value A)   <
 - No secondary pair					      <
 - evaluate_hand's ranking: STRAIGHT_FLUSH		      <
 - 5 cards used for hand: As Ks Qs Js 0s 		      <
Hand 2:							      <
--------						      <
As 5s 4s 3s 2s 						      <
 - Flush in suit s					      <
 - Straight flush at index 0				      <
 - The most of a kind is 1 of a kind (at index 0 / value A)   <
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: STRAIGHT_FLUSH		      <
 - 5 cards used for hand: 5s 4s 3s 2s As 		      <
Comparison : 						      <
--------------						      <
Hand 1 wins!						      <
============================				      <
Testcase 10: Trying each type of hand ranking
Valgrind returned an error status
==4156== Memcheck, a memory error detector
==4156== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==4156== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==4156== Command: ./test-eval inp.10.txt
==4156== Parent PID: 4155
==4156== 
==4156== Use of uninitialised value of size 8
==4156==    at 0x400C02: print_hand (deck.c:19)
==4156==    by 0x4028A7: describe_hand (test-eval.c:74)
==4156==    by 0x402AA7: main (test-eval.c:119)
==4156== 
==4156== Invalid read of size 8
==4156==    at 0x400C02: print_hand (deck.c:19)
==4156==    by 0x4028A7: describe_hand (test-eval.c:74)
==4156==    by 0x402AA7: main (test-eval.c:119)
==4156==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==4156== 
==4156== 
==4156== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==4156==  Access not within mapped region at address 0x0
==4156==    at 0x400C02: print_hand (deck.c:19)
==4156==    by 0x4028A7: describe_hand (test-eval.c:74)
==4156==    by 0x402AA7: main (test-eval.c:119)
==4156==  If you believe this happened as a result of a stack
==4156==  overflow in your program's main thread (unlikely but
==4156==  possible), you can try to increase the size of the
==4156==  main thread stack using the --main-stacksize= flag.
==4156==  The main thread stack size used in this run was 8388608.
==4156== 
==4156== HEAP SUMMARY:
==4156==     in use at exit: 880 bytes in 17 blocks
==4156==   total heap usage: 210 allocs, 193 frees, 12,716 bytes allocated
==4156== 
==4156== LEAK SUMMARY:
==4156==    definitely lost: 0 bytes in 0 blocks
==4156==    indirectly lost: 0 bytes in 0 blocks
==4156==      possibly lost: 0 bytes in 0 blocks
==4156==    still reachable: 880 bytes in 17 blocks
==4156==         suppressed: 0 bytes in 0 blocks
==4156== Rerun with --leak-check=full to see details of leaked memory
==4156== 
==4156== For counts of detected and suppressed errors, rerun with: -v
==4156== Use --track-origins=yes to see where uninitialised values come from
==4156== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)

Overall Grade: F
