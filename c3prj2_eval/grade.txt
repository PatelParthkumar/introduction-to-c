Grading at Mon Dec 30 22:42:08 UTC 2019
Compiling your code
rm -f test poker cards.o my-test-main.o *~
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o deck.o deck.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o eval.o eval.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o cards.o cards.c
gcc -o test-eval -ggdb3 deck.o deck-c4.o eval-c4.o eval.o test-eval.o cards.o input.o future.o
Testcase 1: Trying hands with nothing
Valgrind returned an error status
==366== Memcheck, a memory error detector
==366== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==366== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==366== Command: ./test-eval inp.1.txt
==366== Parent PID: 365
==366== 
==366== Use of uninitialised value of size 8
==366==    at 0x400C02: print_hand (deck.c:19)
==366==    by 0x4028BF: describe_hand (test-eval.c:74)
==366==    by 0x402A9F: main (test-eval.c:116)
==366== 
==366== Invalid read of size 8
==366==    at 0x400C02: print_hand (deck.c:19)
==366==    by 0x4028BF: describe_hand (test-eval.c:74)
==366==    by 0x402A9F: main (test-eval.c:116)
==366==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==366== 
==366== 
==366== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==366==  Access not within mapped region at address 0x0
==366==    at 0x400C02: print_hand (deck.c:19)
==366==    by 0x4028BF: describe_hand (test-eval.c:74)
==366==    by 0x402A9F: main (test-eval.c:116)
==366==  If you believe this happened as a result of a stack
==366==  overflow in your program's main thread (unlikely but
==366==  possible), you can try to increase the size of the
==366==  main thread stack using the --main-stacksize= flag.
==366==  The main thread stack size used in this run was 8388608.
==366== 
==366== HEAP SUMMARY:
==366==     in use at exit: 864 bytes in 16 blocks
==366==   total heap usage: 202 allocs, 186 frees, 12,472 bytes allocated
==366== 
==366== LEAK SUMMARY:
==366==    definitely lost: 0 bytes in 0 blocks
==366==    indirectly lost: 0 bytes in 0 blocks
==366==      possibly lost: 0 bytes in 0 blocks
==366==    still reachable: 864 bytes in 16 blocks
==366==         suppressed: 0 bytes in 0 blocks
==366== Rerun with --leak-check=full to see details of leaked memory
==366== 
==366== For counts of detected and suppressed errors, rerun with: -v
==366== Use --track-origins=yes to see where uninitialised values come from
==366== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 2: Trying hands with pairs
Valgrind returned an error status
==371== Memcheck, a memory error detector
==371== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==371== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==371== Command: ./test-eval inp.2.txt
==371== Parent PID: 370
==371== 
==371== Use of uninitialised value of size 8
==371==    at 0x400C02: print_hand (deck.c:19)
==371==    by 0x4028BF: describe_hand (test-eval.c:74)
==371==    by 0x402ABF: main (test-eval.c:119)
==371== 
==371== Invalid read of size 8
==371==    at 0x400C02: print_hand (deck.c:19)
==371==    by 0x4028BF: describe_hand (test-eval.c:74)
==371==    by 0x402ABF: main (test-eval.c:119)
==371==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==371== 
==371== 
==371== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==371==  Access not within mapped region at address 0x0
==371==    at 0x400C02: print_hand (deck.c:19)
==371==    by 0x4028BF: describe_hand (test-eval.c:74)
==371==    by 0x402ABF: main (test-eval.c:119)
==371==  If you believe this happened as a result of a stack
==371==  overflow in your program's main thread (unlikely but
==371==  possible), you can try to increase the size of the
==371==  main thread stack using the --main-stacksize= flag.
==371==  The main thread stack size used in this run was 8388608.
==371== 
==371== HEAP SUMMARY:
==371==     in use at exit: 880 bytes in 17 blocks
==371==   total heap usage: 32 allocs, 15 frees, 9,360 bytes allocated
==371== 
==371== LEAK SUMMARY:
==371==    definitely lost: 0 bytes in 0 blocks
==371==    indirectly lost: 0 bytes in 0 blocks
==371==      possibly lost: 0 bytes in 0 blocks
==371==    still reachable: 880 bytes in 17 blocks
==371==         suppressed: 0 bytes in 0 blocks
==371== Rerun with --leak-check=full to see details of leaked memory
==371== 
==371== For counts of detected and suppressed errors, rerun with: -v
==371== Use --track-origins=yes to see where uninitialised values come from
==371== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 3: Trying hands with 2 pairs
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 4: Trying hands with 3 of a kind
Valgrind returned an error status
==388== Memcheck, a memory error detector
==388== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==388== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==388== Command: ./test-eval inp.4.txt
==388== Parent PID: 387
==388== 
==388== Use of uninitialised value of size 8
==388==    at 0x401BE3: compare_hands (eval.c:409)
==388==    by 0x402B14: main (test-eval.c:124)
==388== 
==388== Invalid read of size 4
==388==    at 0x401BE3: compare_hands (eval.c:409)
==388==    by 0x402B14: main (test-eval.c:124)
==388==  Address 0xf00000005 is not stack'd, malloc'd or (recently) free'd
==388== 
==388== 
==388== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==388==  Access not within mapped region at address 0xF00000005
==388==    at 0x401BE3: compare_hands (eval.c:409)
==388==    by 0x402B14: main (test-eval.c:124)
==388==  If you believe this happened as a result of a stack
==388==  overflow in your program's main thread (unlikely but
==388==  possible), you can try to increase the size of the
==388==  main thread stack using the --main-stacksize= flag.
==388==  The main thread stack size used in this run was 8388608.
==388== 
==388== HEAP SUMMARY:
==388==     in use at exit: 896 bytes in 18 blocks
==388==   total heap usage: 120 allocs, 102 frees, 11,008 bytes allocated
==388== 
==388== LEAK SUMMARY:
==388==    definitely lost: 0 bytes in 0 blocks
==388==    indirectly lost: 0 bytes in 0 blocks
==388==      possibly lost: 0 bytes in 0 blocks
==388==    still reachable: 896 bytes in 18 blocks
==388==         suppressed: 0 bytes in 0 blocks
==388== Rerun with --leak-check=full to see details of leaked memory
==388== 
==388== For counts of detected and suppressed errors, rerun with: -v
==388== Use --track-origins=yes to see where uninitialised values come from
==388== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 5: Trying hands with straights
Valgrind returned an error status
==393== Memcheck, a memory error detector
==393== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==393== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==393== Command: ./test-eval inp.5.txt
==393== Parent PID: 392
==393== 
==393== Use of uninitialised value of size 8
==393==    at 0x401BE3: compare_hands (eval.c:409)
==393==    by 0x402B14: main (test-eval.c:124)
==393== 
==393== Invalid read of size 4
==393==    at 0x401BE3: compare_hands (eval.c:409)
==393==    by 0x402B14: main (test-eval.c:124)
==393==  Address 0xf00000004 is not stack'd, malloc'd or (recently) free'd
==393== 
==393== 
==393== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==393==  Access not within mapped region at address 0xF00000004
==393==    at 0x401BE3: compare_hands (eval.c:409)
==393==    by 0x402B14: main (test-eval.c:124)
==393==  If you believe this happened as a result of a stack
==393==  overflow in your program's main thread (unlikely but
==393==  possible), you can try to increase the size of the
==393==  main thread stack using the --main-stacksize= flag.
==393==  The main thread stack size used in this run was 8388608.
==393== 
==393== HEAP SUMMARY:
==393==     in use at exit: 928 bytes in 20 blocks
==393==   total heap usage: 360 allocs, 340 frees, 15,704 bytes allocated
==393== 
==393== LEAK SUMMARY:
==393==    definitely lost: 0 bytes in 0 blocks
==393==    indirectly lost: 0 bytes in 0 blocks
==393==      possibly lost: 0 bytes in 0 blocks
==393==    still reachable: 928 bytes in 20 blocks
==393==         suppressed: 0 bytes in 0 blocks
==393== Rerun with --leak-check=full to see details of leaked memory
==393== 
==393== For counts of detected and suppressed errors, rerun with: -v
==393== Use --track-origins=yes to see where uninitialised values come from
==393== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 6: Trying hands with flushes
Valgrind returned an error status
==398== Memcheck, a memory error detector
==398== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==398== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==398== Command: ./test-eval inp.6.txt
==398== Parent PID: 397
==398== 
==398== Use of uninitialised value of size 8
==398==    at 0x401BE3: compare_hands (eval.c:409)
==398==    by 0x402B14: main (test-eval.c:124)
==398== 
==398== Invalid read of size 4
==398==    at 0x401BE3: compare_hands (eval.c:409)
==398==    by 0x402B14: main (test-eval.c:124)
==398==  Address 0xf00000003 is not stack'd, malloc'd or (recently) free'd
==398== 
==398== 
==398== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==398==  Access not within mapped region at address 0xF00000003
==398==    at 0x401BE3: compare_hands (eval.c:409)
==398==    by 0x402B14: main (test-eval.c:124)
==398==  If you believe this happened as a result of a stack
==398==  overflow in your program's main thread (unlikely but
==398==  possible), you can try to increase the size of the
==398==  main thread stack using the --main-stacksize= flag.
==398==  The main thread stack size used in this run was 8388608.
==398== 
==398== HEAP SUMMARY:
==398==     in use at exit: 896 bytes in 18 blocks
==398==   total heap usage: 840 allocs, 822 frees, 24,712 bytes allocated
==398== 
==398== LEAK SUMMARY:
==398==    definitely lost: 0 bytes in 0 blocks
==398==    indirectly lost: 0 bytes in 0 blocks
==398==      possibly lost: 0 bytes in 0 blocks
==398==    still reachable: 896 bytes in 18 blocks
==398==         suppressed: 0 bytes in 0 blocks
==398== Rerun with --leak-check=full to see details of leaked memory
==398== 
==398== For counts of detected and suppressed errors, rerun with: -v
==398== Use --track-origins=yes to see where uninitialised values come from
==398== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 7: Trying hands with full houses
Valgrind returned an error status
==403== Memcheck, a memory error detector
==403== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==403== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==403== Command: ./test-eval inp.7.txt
==403== Parent PID: 402
==403== 
==403== Use of uninitialised value of size 8
==403==    at 0x401BE3: compare_hands (eval.c:409)
==403==    by 0x402B14: main (test-eval.c:124)
==403== 
==403== Invalid read of size 4
==403==    at 0x401BE3: compare_hands (eval.c:409)
==403==    by 0x402B14: main (test-eval.c:124)
==403==  Address 0xf00000002 is not stack'd, malloc'd or (recently) free'd
==403== 
==403== 
==403== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==403==  Access not within mapped region at address 0xF00000002
==403==    at 0x401BE3: compare_hands (eval.c:409)
==403==    by 0x402B14: main (test-eval.c:124)
==403==  If you believe this happened as a result of a stack
==403==  overflow in your program's main thread (unlikely but
==403==  possible), you can try to increase the size of the
==403==  main thread stack using the --main-stacksize= flag.
==403==  The main thread stack size used in this run was 8388608.
==403== 
==403== HEAP SUMMARY:
==403==     in use at exit: 928 bytes in 20 blocks
==403==   total heap usage: 70 allocs, 50 frees, 10,216 bytes allocated
==403== 
==403== LEAK SUMMARY:
==403==    definitely lost: 0 bytes in 0 blocks
==403==    indirectly lost: 0 bytes in 0 blocks
==403==      possibly lost: 0 bytes in 0 blocks
==403==    still reachable: 928 bytes in 20 blocks
==403==         suppressed: 0 bytes in 0 blocks
==403== Rerun with --leak-check=full to see details of leaked memory
==403== 
==403== For counts of detected and suppressed errors, rerun with: -v
==403== Use --track-origins=yes to see where uninitialised values come from
==403== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 8: Trying hands with 4 of a kind
Valgrind returned an error status
==408== Memcheck, a memory error detector
==408== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==408== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==408== Command: ./test-eval inp.8.txt
==408== Parent PID: 407
==408== 
==408== Use of uninitialised value of size 8
==408==    at 0x400C02: print_hand (deck.c:19)
==408==    by 0x4028BF: describe_hand (test-eval.c:74)
==408==    by 0x402ABF: main (test-eval.c:119)
==408== 
==408== Invalid read of size 8
==408==    at 0x400C02: print_hand (deck.c:19)
==408==    by 0x4028BF: describe_hand (test-eval.c:74)
==408==    by 0x402ABF: main (test-eval.c:119)
==408==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==408== 
==408== 
==408== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==408==  Access not within mapped region at address 0x0
==408==    at 0x400C02: print_hand (deck.c:19)
==408==    by 0x4028BF: describe_hand (test-eval.c:74)
==408==    by 0x402ABF: main (test-eval.c:119)
==408==  If you believe this happened as a result of a stack
==408==  overflow in your program's main thread (unlikely but
==408==  possible), you can try to increase the size of the
==408==  main thread stack using the --main-stacksize= flag.
==408==  The main thread stack size used in this run was 8388608.
==408== 
==408== HEAP SUMMARY:
==408==     in use at exit: 896 bytes in 18 blocks
==408==   total heap usage: 150 allocs, 132 frees, 11,568 bytes allocated
==408== 
==408== LEAK SUMMARY:
==408==    definitely lost: 0 bytes in 0 blocks
==408==    indirectly lost: 0 bytes in 0 blocks
==408==      possibly lost: 0 bytes in 0 blocks
==408==    still reachable: 896 bytes in 18 blocks
==408==         suppressed: 0 bytes in 0 blocks
==408== Rerun with --leak-check=full to see details of leaked memory
==408== 
==408== For counts of detected and suppressed errors, rerun with: -v
==408== Use --track-origins=yes to see where uninitialised values come from
==408== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 9: Trying hands with straight flushes
 Checking the output 
Line_53_did_not_match
Your file did not match the expected ouput
 - Output did not match, testcase failed
Hand 1:								Hand 1:
--------							--------
As Ks Qs Js 0s 							As Ks Qs Js 0s 
 - Flush in suit s						 - Flush in suit s
 - Straight flush at index 0					 - Straight flush at index 0
 - The most of a kind is 1 of a kind (at index 0 / value A)	 - The most of a kind is 1 of a kind (at index 0 / value A)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: STRAIGHT_FLUSH			 - evaluate_hand's ranking: STRAIGHT_FLUSH
 - 5 cards used for hand: As Ks Qs Js 0s 			 - 5 cards used for hand: As Ks Qs Js 0s 
Hand 2:								Hand 2:
--------							--------
Kh Qh Jh 0h 9h 							Kh Qh Jh 0h 9h 
 - Flush in suit h						 - Flush in suit h
 - Straight flush at index 0					 - Straight flush at index 0
 - The most of a kind is 1 of a kind (at index 0 / value K)	 - The most of a kind is 1 of a kind (at index 0 / value K)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: STRAIGHT_FLUSH			 - evaluate_hand's ranking: STRAIGHT_FLUSH
 - 5 cards used for hand: Kh Qh Jh 0h 9h 			 - 5 cards used for hand: Kh Qh Jh 0h 9h 
Comparison : 							Comparison : 
--------------							--------------
Hand 1 wins!							Hand 1 wins!
============================					============================
Hand 1:								Hand 1:
--------							--------
As Ks Qs Js 0s 9s 8s 						As Ks Qs Js 0s 9s 8s 
 - Flush in suit s						 - Flush in suit s
 - Straight flush at index 0					 - Straight flush at index 0
 - Straight flush at index 1					 - Straight flush at index 1
 - Straight flush at index 2					 - Straight flush at index 2
 - The most of a kind is 1 of a kind (at index 0 / value A)	 - The most of a kind is 1 of a kind (at index 0 / value A)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: STRAIGHT_FLUSH			 - evaluate_hand's ranking: STRAIGHT_FLUSH
 - 5 cards used for hand: As Ks Qs Js 0s 			 - 5 cards used for hand: As Ks Qs Js 0s 
Hand 2:								Hand 2:
--------							--------
Kh Qh Jh 0h 9h 8h 7h 						Kh Qh Jh 0h 9h 8h 7h 
 - Flush in suit h						 - Flush in suit h
 - Straight flush at index 0					 - Straight flush at index 0
 - Straight flush at index 1					 - Straight flush at index 1
 - Straight flush at index 2					 - Straight flush at index 2
 - The most of a kind is 1 of a kind (at index 0 / value K)	 - The most of a kind is 1 of a kind (at index 0 / value K)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: STRAIGHT_FLUSH			 - evaluate_hand's ranking: STRAIGHT_FLUSH
 - 5 cards used for hand: Kh Qh Jh 0h 9h 			 - 5 cards used for hand: Kh Qh Jh 0h 9h 
Comparison : 							Comparison : 
--------------							--------------
Hand 1 wins!							Hand 1 wins!
============================					============================
Hand 1:								Hand 1:
--------							--------
Ac As Kc Ks Qs Js 0s 						Ac As Kc Ks Qs Js 0s 
 - Flush in suit s						 - Flush in suit s
 - Straight at index 0					      |	 - Straight flush at index 0
 - Straight flush at index 1					 - Straight flush at index 1
 - The most of a kind is 2 of a kind (at index 0 / value A)	 - The most of a kind is 2 of a kind (at index 0 / value A)
 - Secondary pair at index 2 (value K)				 - Secondary pair at index 2 (value K)
 - evaluate_hand's ranking: STRAIGHT_FLUSH		      <
 - 5 cards used for hand: As Ks Qs Js 0s 		      <
Hand 2:							      <
--------						      <
Ad Kh Qh Jh Js 0h 9h 					      <
 - Flush in suit h					      <
 - Straight at index 0					      <
 - Straight flush at index 1				      <
 - The most of a kind is 2 of a kind (at index 3 / value J)   <
 - No secondary pair					      <
 - evaluate_hand's ranking: STRAIGHT_FLUSH		      <
 - 5 cards used for hand: Kh Qh Jh 0h 9h 		      <
Comparison : 						      <
--------------						      <
Hand 1 wins!						      <
============================				      <
Hand 1:							      <
--------						      <
Ah Kc 5h 4h 3h 2h 					      <
 - Flush in suit h					      <
 - Straight flush at index 0				      <
 - The most of a kind is 1 of a kind (at index 0 / value A)   <
 - No secondary pair					      <
 - evaluate_hand's ranking: STRAIGHT_FLUSH		      <
 - 5 cards used for hand: 5h 4h 3h 2h Ah 		      <
Hand 2:							      <
--------						      <
Ac 6c 5c 4c 3c 2c 					      <
 - Flush in suit c					      <
 - Straight flush at index 0				      <
 - Straight flush at index 1				      <
 - The most of a kind is 1 of a kind (at index 0 / value A)   <
 - No secondary pair					      <
 - evaluate_hand's ranking: STRAIGHT_FLUSH		      <
 - 5 cards used for hand: 5c 4c 3c 2c Ac 		      <
Comparison : 						      <
--------------						      <
Tie							      <
============================				      <
Hand 1:							      <
--------						      <
As Ks Qs Js 0s 						      <
 - Flush in suit s					      <
 - Straight flush at index 0				      <
 - The most of a kind is 1 of a kind (at index 0 / value A)   <
 - No secondary pair					      <
 - evaluate_hand's ranking: STRAIGHT_FLUSH		      <
 - 5 cards used for hand: As Ks Qs Js 0s 		      <
Hand 2:							      <
--------						      <
As 5s 4s 3s 2s 						      <
 - Flush in suit s					      <
 - Straight flush at index 0				      <
 - The most of a kind is 1 of a kind (at index 0 / value A)   <
 - No secondary pair					      <
 - evaluate_hand's ranking: STRAIGHT_FLUSH		      <
 - 5 cards used for hand: 5s 4s 3s 2s As 		      <
Comparison : 						      <
--------------						      <
Hand 1 wins!						      <
============================				      <
Testcase 10: Trying each type of hand ranking
Valgrind returned an error status
==426== Memcheck, a memory error detector
==426== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==426== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==426== Command: ./test-eval inp.10.txt
==426== Parent PID: 425
==426== 
==426== Use of uninitialised value of size 8
==426==    at 0x400C02: print_hand (deck.c:19)
==426==    by 0x4028BF: describe_hand (test-eval.c:74)
==426==    by 0x402ABF: main (test-eval.c:119)
==426== 
==426== Invalid read of size 8
==426==    at 0x400C02: print_hand (deck.c:19)
==426==    by 0x4028BF: describe_hand (test-eval.c:74)
==426==    by 0x402ABF: main (test-eval.c:119)
==426==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==426== 
==426== 
==426== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==426==  Access not within mapped region at address 0x0
==426==    at 0x400C02: print_hand (deck.c:19)
==426==    by 0x4028BF: describe_hand (test-eval.c:74)
==426==    by 0x402ABF: main (test-eval.c:119)
==426==  If you believe this happened as a result of a stack
==426==  overflow in your program's main thread (unlikely but
==426==  possible), you can try to increase the size of the
==426==  main thread stack using the --main-stacksize= flag.
==426==  The main thread stack size used in this run was 8388608.
==426== 
==426== HEAP SUMMARY:
==426==     in use at exit: 880 bytes in 17 blocks
==426==   total heap usage: 210 allocs, 193 frees, 12,716 bytes allocated
==426== 
==426== LEAK SUMMARY:
==426==    definitely lost: 0 bytes in 0 blocks
==426==    indirectly lost: 0 bytes in 0 blocks
==426==      possibly lost: 0 bytes in 0 blocks
==426==    still reachable: 880 bytes in 17 blocks
==426==         suppressed: 0 bytes in 0 blocks
==426== Rerun with --leak-check=full to see details of leaked memory
==426== 
==426== For counts of detected and suppressed errors, rerun with: -v
==426== Use --track-origins=yes to see where uninitialised values come from
==426== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)

Overall Grade: F
